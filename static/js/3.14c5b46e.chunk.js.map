{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatusTC","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","className","styles","formSummaryError","createField","Input","required","undefined","type","Textarea","Object","entries","contacts","map","index","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","keys","key","contactTitle","contactValue","Preloader","Contact","ProfileInfo","savePhoto","saveProfile","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","target","files","length","initialValues","formData","then","Post","classes","item","message","likeCount","maxLength10","maxLengthCreator","MyPosts","a","setA","setTimeout","console","log","postsElements","posts","p","id","postsBlock","AddMyPostsFormRedux","values","addPost","newMyPost","MyPostsMemorized","React","memo","MyPostsContainer","profilePage","actions","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","compose","withRouter"],"mappings":"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","file":"static/js/3.14c5b46e.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<WCP>(Component: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as WCP}/>\r\n    }\r\n\r\n\r\nlet ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\nreturn ConnectedAuthRedirectComponent;\r\n}\r\n;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1yGOj\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3gMab\",\"contact\":\"ProfileInfo_contact__HrIMq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2PbKd\",\"posts\":\"MyPosts_posts__1RwQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CkvLJ\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\nexport type ProfileStatusWithHooksType = {\r\n    status: string,\r\n    updateStatusTC: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks:React.FC<ProfileStatusWithHooksType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatusTC(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"----------------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css';\r\nimport styles from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileInfoType} from \"../../../types/types\";\r\n\r\nexport type ProfileType = {\r\n    profile: null | ProfileInfoType\r\n}\r\n\r\ntype FormDataValuesTypeKeys = Extract<keyof ProfileInfoType, string>\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileInfoType, ProfileType> & ProfileType> = ({handleSubmit, error, profile}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full Name</b>: {createField<FormDataValuesTypeKeys>(\"Full name\", 'fullName', Input, [required])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a\r\n                    job</b>: {createField<FormDataValuesTypeKeys>(undefined, 'lookingForAJob', Input, [required], {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                {createField<FormDataValuesTypeKeys>(\"My professional skills\", 'lookingForAJobDescription', Textarea, [required])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField<FormDataValuesTypeKeys>(\"About me\", 'aboutMe', Textarea, [required])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile && Object.entries(profile.contacts).map((value, index) => {\r\n                return <div className={s.contact}>\r\n                    <b>{value[0]}: {createField(value[0], 'contacts.' + value[0], Input, [])}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileInfoType, ProfileType>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileInfoType} from \"../../../types/types\";\r\n\r\n\r\nconst ProfileInfo:React.FC<ProfilePropsType> = ({profile, status, updateStatusTC, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onsubmit = (formData: ProfileInfoType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} alt=\"\" className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataReduxForm profile={profile} initialValues={profile} onSubmit={onsubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatusTC={updateStatusTC}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type ProfileDataType = {\r\n    profile: null | ProfileInfoType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData:React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    } else\r\n        return (\r\n            <div>\r\n                {isOwner && <div>\r\n                    <button onClick={goToEditMode}>edit</button>\r\n                </div>}\r\n                <div>\r\n                    <b>Full Name</b>: {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n                }\r\n                <div>\r\n                    <b>About me</b>: {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b>: {\r\n                    Object\r\n                        .keys(profile.contacts)\r\n                    .map((key) => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                    {/*<b>Contacts</b>: {Object.entries(profile.contacts).map((value, index) => {*/}\r\n                    {/*return <Contact key={index} contactTitle={value[0]} contactValue={value[1]}/>*/}\r\n                })}\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport type ContactPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\nconst Contact:React.FC<ContactPropsType> = (props) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{props.contactTitle}</b>:{props.contactValue}\r\n        </div>)\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType ={\r\n    id:number\r\n    message:string\r\n    likeCount:number\r\n}\r\n\r\nconst Post:React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-pdb/750997/2f4a61ff-0c60-41d6-a2f1-049bc4ee8f21/s1200?webp=false\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\ntype FormDataType = {\r\n    newMyPost: string\r\n}\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newMyPost: string) => void\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts:React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n    const [a, setA] = useState(1)\r\n\r\n\r\n    useEffect( ()=> {\r\n        setTimeout( ()=> {\r\n            setA(2)\r\n            console.log('hello', a)\r\n        }, 2000 )\r\n    },[a] )\r\n\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newMyPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddMyPostsFormRedux onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\ntype FormDataValuesTypeKeys = Extract<keyof FormDataType, string>\r\n\r\nconst AddMyPostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<FormDataValuesTypeKeys>(\"Enter your post\", 'newMyPost', Textarea, [required,maxLength10])}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostsFormRedux = reduxForm<FormDataType>({form: 'profileAddNewMyPost'})(AddMyPostsForm)\r\n\r\nexport default MyPostsMemorized;","import React from \"react\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType,DispatchPropsType,{},AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostAC\r\n})(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfoType} from \"../../types/types\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: null | ProfileInfoType,\r\n    status: string,\r\n    updateStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileInfoType) => Promise<any>\r\n}\r\n\r\nconst Profile:React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatusTC={props.updateStatusTC}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {getStatusTC, getUserProfileTC, savePhoto, saveProfile, updateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileInfoType} from \"../../types/types\";\r\n\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchPropsType = {\r\n    getUserProfileTC: (userId: number) => void\r\n    getStatusTC: (userId: number) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileInfoType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.log(\"ID should exists in URI params ot state ('authorizedUserId') \")\r\n        } else {\r\n            this.props.getUserProfileTC(userId)\r\n            this.props.getStatusTC(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileTC,\r\n        getStatusTC,\r\n        updateStatusTC,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}