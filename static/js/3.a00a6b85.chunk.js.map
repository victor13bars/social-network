{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatusThunkCreator","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","className","styles","formSummaryError","createField","Input","required","type","Textarea","Object","entries","contacts","map","index","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","key","contactTitle","contactValue","Preloader","Contact","ProfileInfo","savePhoto","saveProfile","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","target","files","length","initialValues","formData","then","Post","classes","item","message","likeCount","maxLength10","maxLengthCreator","MyPosts","React","memo","console","log","posts","postsElements","p","id","postsBlock","AddMyPostsFormRedux","values","addPost","newMyPost","Field","component","name","placeholder","validate","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","histoty","push","getUserProfileThunkCreator","getStatusThunkCreator","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,UAAY,+BAA+B,QAAU,+B,oBCAhID,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,8HCoGVC,EAtCgB,SAACC,GAAuC,IAAD,EACpCC,oBAAS,GAD2B,mBAC7DC,EAD6D,KACnDC,EADmD,OAExCF,mBAASD,EAAMI,QAFyB,mBAE7DA,EAF6D,KAErDC,EAFqD,KAIlEC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAeV,OACI,8BACMF,GACF,6BACI,uCADJ,IACoB,0BAAMK,cAjBT,WACrBJ,GAAY,KAgBoDH,EAAMI,QAAU,qBAG3EF,GACD,6BACI,2BAAOM,SAbI,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYeC,WAAW,EAAMC,OAlBnC,WACvBV,GAAY,GACZH,EAAMc,yBAAyBV,IAiBhBO,MAAOP,O,4DCxCfW,EADcC,YAA4C,CAACC,KAAM,gBAAnDD,EAlCwE,SAAC,GAAoC,IAAnCE,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACxH,OACI,0BAAMC,SAAUH,GACZ,6BACI,yCAEHC,GAAS,yBAAKG,UAAWC,IAAOC,kBAC5BL,GAEL,6BACI,wCADJ,KACuBM,YAAY,YAAa,WAAYC,IAAO,CAACC,OAEpE,6BACI,gDADJ,KAC+BF,YAAY,KAAM,iBAAkBC,IAAO,CAACC,KAAW,CAACC,KAAM,cAE7F,6BACI,qDADJ,IAEKH,YAAY,yBAA0B,4BAA6BI,IAAU,CAACF,OAEnF,6BACI,uCADJ,IAEKF,YAAY,WAAY,UAAWI,IAAU,CAACF,OAEnD,6BACI,uCADJ,KACsBP,GAAWU,OAAOC,QAAQX,EAAQY,UAAUC,KAAI,SAACtB,EAAOuB,GAC1E,OAAO,yBAAKZ,UAAWa,IAAEC,SACrB,2BAAIzB,EAAM,GAAV,KAAgBc,YAAYd,EAAM,GAAI,YAAcA,EAAM,GAAIe,IAAO,cCGnFW,EAAc,SAAC,GAAuD,IAAtDjB,EAAqD,EAArDA,QAASkB,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,aACpC,OAAKnB,EAIG,6BACKkB,GAAW,6BACR,4BAAQE,QAASD,GAAjB,SAEJ,6BACI,wCADJ,KACuBnB,EAAQqB,UAE/B,6BACI,gDADJ,KAC+BrB,EAAQsB,eAAiB,MAAQ,MAE/DtB,EAAQsB,gBACT,6BACI,qDADJ,KACoCtB,EAAQuB,2BAG5C,6BACI,uCADJ,KACsBvB,EAAQwB,SAE9B,6BACI,uCADJ,KACsBd,OAAOC,QAAQX,EAAQY,UAAUC,KAAI,SAACtB,EAAOuB,GAC/D,OAAO,kBAAC,EAAD,CAASW,IAAKX,EAAOY,aAAcnC,EAAM,GAAIoC,aAAcpC,EAAM,UAvB7E,kBAACqC,EAAA,EAAD,OAkCTC,EAAU,SAACjD,GACb,OACI,yBAAKsB,UAAWa,IAAEC,SACd,2BAAIpC,EAAM8C,cADd,IACiC9C,EAAM+C,eAIhCG,EAhFK,SAAC,GAAoG,IAAnG9B,EAAkG,EAAlGA,QAAShB,EAAyF,EAAzFA,OAAQU,EAAiF,EAAjFA,yBAA0BwB,EAAuD,EAAvDA,QAASa,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,YAAmC,EACtFnD,oBAAS,GAD6E,mBAC/GC,EAD+G,KACrGC,EADqG,KAGpH,IAAKiB,EACD,OAAO,kBAAC4B,EAAA,EAAD,MAYX,OACI,6BACI,yBAAK1B,UAAWa,IAAEkB,kBACd,yBAAKC,IAAKlC,EAAQmC,OAAOC,OAASC,IAAWC,IAAI,GAAGpC,UAAWa,IAAEwB,YAChErB,GAAW,2BAAOV,KAAM,OAAQpB,SAdjB,SAACC,GACrBA,EAAEmD,OAAOC,MAAMC,QACfX,EAAU1C,EAAEmD,OAAOC,MAAM,OAapB3D,EACK,kBAAC,EAAD,CAAsBkB,QAASA,EAAS2C,cAAe3C,EAASC,SAXjE,SAAC2C,GACdZ,EAAYY,GAAUC,MAAK,WACvB9D,GAAY,SAUF,kBAAC,EAAD,CAAaiB,QAASA,EAASkB,QAASA,EAASC,aAAc,WAC7DpC,GAAY,MAEpB,kBAAC,EAAD,CAAwBC,OAAQA,EAAQU,yBAA0BA,O,oCCdnEoD,EAdF,SAAClE,GACV,OACI,yBAAKsB,UAAW6C,IAAQC,MACpB,yBACId,IAAI,sGACJI,IAAI,KACP1D,EAAMqE,QACP,6BACI,sCADJ,IACuBrE,EAAMsE,a,QCKnCC,EAAcC,YAAiB,IAE/BC,EAAUC,IAAMC,MAAK,SAAC3E,GACxB4E,QAAQC,IAAI7E,EAAM8E,OAClB,IAAIC,EAAgB/E,EAAM8E,MAAM7C,KAAI,SAAA+C,GAAC,OAAI,kBAAC,EAAD,CAAMnC,IAAKmC,EAAEC,GAAIA,GAAID,EAAEC,GAAIZ,QAASW,EAAEX,QAASC,UAAWU,EAAEV,eAiBrG,OACI,yBAAKhD,UAAW6C,IAAQe,YACpB,wCACA,kBAACC,EAAD,CAAqB9D,SAPZ,SAAC+D,GACdpF,EAAMqF,QAAQD,EAAOE,cAOjB,yBAAKhE,UAAW6C,IAAQW,OACnBC,OAsBXI,EAAsBnE,YAAwB,CAACC,KAAM,uBAA/BD,EAfsC,SAAChB,GAC/D,OACI,0BAAMqB,SAAUrB,EAAMkB,cAClB,6BACI,kBAACqE,EAAA,EAAD,CAAOC,UAAW3D,IAAU4D,KAAK,YAAYC,YAAY,kBAClDC,SAAU,CAAChE,IAAU4C,MAGhC,6BACI,iDAQDE,I,gBCzBAmB,EADUC,aAbH,SAACC,GACnB,MAAO,CACHhB,MAAOgB,EAAMC,YAAYjB,UAGR,SAACkB,GACtB,MAAO,CACHX,QAAS,SAACC,GACNU,EAASC,YAAUX,QAKNO,CAA6CpB,GClBvDyB,EAXC,SAAClG,GACb,OACI,6BACI,kBAAC,EAAD,CAAaoB,QAASpB,EAAMoB,QAAShB,OAAQJ,EAAMI,OACtCU,yBAA0Bd,EAAMc,yBAA0BwB,QAAStC,EAAMsC,QACzEa,UAAWnD,EAAMmD,UAAWC,YAAapD,EAAMoD,cAC5D,kBAAC,EAAD,Q,sBCgBN+C,E,+KAEE,IAAIC,EAASC,KAAKrG,MAAMsG,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKrG,MAAMwG,mBAEhBH,KAAKrG,MAAMyG,QAAQC,KAAK,UAGhCL,KAAKrG,MAAM2G,2BAA2BP,GACtCC,KAAKrG,MAAM4G,sBAAsBR,K,0CAIjCC,KAAKQ,mB,yCAGUC,EAA0BC,EAAgCC,GACrEX,KAAKrG,MAAMsG,MAAMC,OAAOH,QAAUU,EAAUR,MAAMC,OAAOH,QACzDC,KAAKQ,mB,+BAKT,OACI,6BACI,kBAAC,EAAD,iBAAaR,KAAKrG,MAAlB,CACSsC,SAAU+D,KAAKrG,MAAMsG,MAAMC,OAAOH,OAClChF,QAASiF,KAAKrG,MAAMoB,QACpBhB,OAAQiG,KAAKrG,MAAMI,OACnBU,yBAA0BuF,KAAKrG,MAAMc,yBACrCqC,UAAWkD,KAAKrG,MAAMmD,UACtBC,YAAaiD,KAAKrG,MAAMoD,oB,GAhClBsB,IAAMuC,WA+CtBC,sBACXrB,aATkB,SAACC,GAAD,MAA6C,CAC/D1E,QAAS0E,EAAMC,YAAY3E,QAC3BhB,OAAQ0F,EAAMC,YAAY3F,OAC1BoG,iBAAkBV,EAAMqB,KAAKlC,GAC7BmC,OAAQtB,EAAMqB,KAAKC,UAKM,CACrBT,+BACAC,0BACA9F,6BACAqC,cACAC,kBAEJiE,IACAC,IATWJ,CAUbf","file":"static/js/3.a00a6b85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1yGOj\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3gMab\",\"contact\":\"ProfileInfo_contact__HrIMq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2PbKd\",\"posts\":\"MyPosts_posts__1RwQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CkvLJ\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n// import React, {ChangeEvent} from \"react\";\r\n// import classes from './ProfileInfo.module.css';\r\n//\r\n//\r\n// class ProfileStatus extends React.Component<any> {\r\n//     state = {\r\n//         editMode: false,\r\n//         status: this.props.status\r\n//     }\r\n//\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: true\r\n//         })\r\n//     }\r\n//\r\n//     deactivateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: false\r\n//         })\r\n//         this.props.updateStatusThunkCreator(this.state.status)\r\n//     }\r\n//\r\n//     onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({status: e.currentTarget.value})\r\n//\r\n//     }\r\n//\r\n//     componentDidUpdate(prevProps: any, prevState: any) {\r\n//         if (prevProps.status !== this.props.status) {\r\n//             this.setState({\r\n//                 status: this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {!this.state.editMode &&\r\n//                 <div>\r\n//                     <span onDoubleClick={this.activateEditMode}>{this.props.status || \"----------------\"}</span>\r\n//                 </div>\r\n//                 }\r\n//                 {this.state.editMode &&\r\n//                 <div>\r\n//                     <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\r\n//                            value={this.state.status}></input>\r\n//                 </div>\r\n//                 }\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n//\r\n// export default ProfileStatus;\r\n\r\nexport type ProfileStatusWithHooksType = {\r\n    status: string,\r\n    updateStatusThunkCreator: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatusThunkCreator(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"----------------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import {ContactsType, ProfileInfoType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css';\r\nimport styles from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\nexport type ProfileType = {\r\n    profile: null | ProfileInfoType\r\n}\r\nexport type ProfileDataFormType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n}\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType, ProfileType> & ProfileType> = ({handleSubmit, error, profile}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full Name</b>: {createField(\"Full name\", 'fullName', Input, [required])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField(null, 'lookingForAJob', Input, [required], {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                {createField(\"My professional skills\", 'lookingForAJobDescription', Textarea, [required])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField(\"About me\", 'aboutMe', Textarea, [required])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile && Object.entries(profile.contacts).map((value, index) => {\r\n                return <div className={s.contact}>\r\n                    <b>{value[0]}: {createField(value[0], 'contacts.' + value[0], Input, [])}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileDataFormType, ProfileType>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {ContactsType, ProfileInfoType} from \"../../../redux/profile-reducer\";\r\nimport ProfileDataForm, {ProfileDataFormType} from \"./ProfileDataForm\";\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatusThunkCreator, isOwner, savePhoto, saveProfile}: ProfilePropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onsubmit = (formData: ProfileDataFormType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} alt=\"\" className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataReduxForm profile={profile} initialValues={profile} onSubmit={onsubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatusThunkCreator={updateStatusThunkCreator}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport type ProfileDataType = {\r\n    profile: null | ProfileInfoType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    } else\r\n        return (\r\n            <div>\r\n                {isOwner && <div>\r\n                    <button onClick={goToEditMode}>edit</button>\r\n                </div>}\r\n                <div>\r\n                    <b>Full Name</b>: {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n                }\r\n                <div>\r\n                    <b>About me</b>: {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b>: {Object.entries(profile.contacts).map((value, index) => {\r\n                    return <Contact key={index} contactTitle={value[0]} contactValue={value[1]}/>\r\n                })}\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport type ContactType = {\r\n    contactTitle: any,\r\n    contactValue: any\r\n}\r\nconst Contact = (props: ContactType) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{props.contactTitle}</b>:{props.contactValue}\r\n        </div>)\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType ={\r\n    id:number\r\n    message:string\r\n    likeCount:number\r\n}\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-pdb/750997/2f4a61ff-0c60-41d6-a2f1-049bc4ee8f21/s1200?webp=false\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newMyPost: string\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newMyPost: string) => void\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log(props.posts)\r\n    let postsElements = props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    // let onAddPost = () => {\r\n    //     props.addPost();\r\n    //     //props.dispatch(addPostActionCreator());\r\n    // }\r\n    //\r\n    // let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.currentTarget.value;\r\n    //     props.updateNewPostText(text);\r\n    //     //props.dispatch(updateNewPostTextActionCreator(text))\r\n    // }\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newMyPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddMyPostsFormRedux onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nconst AddMyPostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMyPost\" placeholder=\"Enter your post\"\r\n                       validate={[required, maxLength10]}/>\r\n                {/*<textarea value={props.newPostText} onChange={onPostChange}/>*/}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostsFormRedux = reduxForm<FormDataType>({form: 'profileAddNewMyPost'})(AddMyPostsForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, ProfileReducersTypes} from \"../../../redux/profile-reducer\";\r\n\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState();\r\n//\r\n//                     let addPost = () => {\r\n//                         store.dispatch(addPostActionCreator());\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = updateNewPostTextActionCreator(text);\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts updateNewPostText={onPostChange} addPost={addPost}\r\n//                                     posts={state.profileReducer.posts}\r\n//                                     newPostText={state.profileReducer.messageForNewPost}/>\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducersTypes>) => {\r\n    return {\r\n        addPost: (newMyPost: string) => {\r\n            dispatch(addPostAC(newMyPost));\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport classes from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfoType} from \"../../redux/profile-reducer\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: null | ProfileInfoType,\r\n    status: string,\r\n    updateStatusThunkCreator: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (formData: ProfileDataFormType) => Promise<any>\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status}\r\n                         updateStatusThunkCreator={props.updateStatusThunkCreator} isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {\r\n    getStatusThunkCreator,\r\n    getUserProfileThunkCreator,\r\n    ProfileInfoType, savePhoto, saveProfile,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter, Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile:  ProfileInfoType | null\r\n    status: string\r\n    authorizedUserId: null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunkCreator: (userId: number) => void\r\n    getStatusThunkCreator: (userId: number) => void\r\n    updateStatusThunkCreator: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (formData: ProfileDataFormType) => void\r\n}\r\ntype PathParamsTYpe = {\r\n    userId: string\r\n}\r\ntype ProfilePropsType = MapDispatchPropsType & MapStatePropsType\r\ntype PropsType = RouteComponentProps<PathParamsTYpe> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<any, PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.histoty.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getStatusThunkCreator(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<PropsType>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusThunkCreator={this.props.updateStatusThunkCreator}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        getStatusThunkCreator,\r\n        updateStatusThunkCreator,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfileThunkCreator})(WithUrlDataContainerComponent));"],"sourceRoot":""}