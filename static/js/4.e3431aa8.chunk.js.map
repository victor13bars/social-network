{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","message","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsItems","dialogs","map","key","messagesItems","messages","ms","values","console","log","sendMessage","newMessageBody","compose","connect","state","dialogsPage","dispatch","sendMessageAC","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sFCkBpMC,EAVI,SAACC,GAChB,IAAIC,EAAM,WAAaD,EAAME,GAC7B,OAEI,yBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,QAC3C,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCEvBC,EARC,SAACT,GACb,OACI,yBAAKG,UAAWC,IAAQM,SACnBV,EAAMU,U,iCCSbC,EAAcC,YAAiB,IAgD/BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EApBqC,SAACd,GAC9D,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXZ,KAAK,iBACLa,YAAY,sBACnBC,SAAU,CAACC,IAASZ,MAKxB,6BACI,6CASDa,EAjDC,SAACxB,GAEb,IAAIyB,EAAezB,EAAM0B,QAAQC,KAAI,SAAAtB,GAAM,OAAK,kBAAC,EAAD,CAAYH,GAAIG,EAAOH,GAAI0B,IAAKvB,EAAOH,GAAIM,KAAMH,EAAOG,UACpGqB,EAAgB7B,EAAM8B,SAASH,KAAI,SAAAI,GAAE,OAAI,kBAAC,EAAD,CAAS7B,GAAI6B,EAAG7B,GAAIQ,QAASqB,EAAGrB,QAASkB,IAAKG,EAAG7B,QAO9F,OACI,yBAAKC,UAAWC,IAAQsB,SACpB,yBAAKvB,UAAWC,IAAQqB,cACnBA,GAGL,yBAAKtB,UAAWC,IAAQ0B,UACpB,6BACKD,GAEL,kBAAChB,EAAD,CAAqBG,SAfb,SAACgB,GACjBC,QAAQC,IAAIF,GACZhC,EAAMmC,YAAYH,EAAOI,sB,gCCNlBC,sBACXC,aAfkB,SAACC,GACnB,MAAO,CACHb,QAASa,EAAMC,YAAYd,QAC3BI,SAAUS,EAAMC,YAAYV,aAGX,SAACW,GACtB,MAAO,CACHN,YAAa,SAACC,GACVK,EAASC,YAAcN,SAO/BO,IAFWN,CAGbb","file":"static/js/4.e3431aa8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__M95VY\",\"dialogsItems\":\"Dialogs_dialogsItems__2nFq3\",\"dialog\":\"Dialogs_dialog__1OLky\",\"active\":\"Dialogs_active__3UHKX\",\"messages\":\"Dialogs_messages__1VmHk\",\"message\":\"Dialogs_message__1a9NF\"};","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path =\"/dialog/\" + props.id;\r\n    return (\r\n\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype MessageType = {\r\n    id:number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport type DialogsPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: (newMessageBody: string) => void,\r\n    isAuth: boolean\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsItems = props.dialogs.map(dialog => (<DialogItem id={dialog.id} key={dialog.id} name={dialog.name}/>));\r\n    let messagesItems = props.messages.map(ms => <Message id={ms.id} message={ms.message} key={ms.id}/>);\r\n\r\n    let addNewMessage = (values:FormDataType) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsItems}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    {messagesItems}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message \"\r\n                validate={[required,maxLength10]}/>\r\n                {/*<textarea value={newMessageBody}*/}\r\n                {/*          onChange={onNewMessageChange}*/}\r\n                {/*          placeholder=\"Enter your message \"></textarea>*/}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {DialogsReducersTypes, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<DialogsReducersTypes>) => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}