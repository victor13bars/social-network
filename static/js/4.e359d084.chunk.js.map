{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","classes","dialog","active","name","Message","message","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","Dialogs","dialogsItems","dialogs","map","messagesItems","messages","ms","values","sendMessage","newMessageBody","compose","dialogsPage","actions","sendMessageAC"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,kICU/MC,EAA6B,SAACC,GAAD,MAA6C,CAC1EC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAsBC,GAWtC,OAFqCC,YAAoEN,EAA4B,GAAhGM,EAP6C,SAACC,GAC3E,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,GACA,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,kFCJ3BC,EAVyB,SAACH,GACrC,IAAII,EAAM,WAAaJ,EAAMK,GAC7B,OAEI,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACI,cAAC,IAAD,CAASP,GAAIE,EAAb,SAAoBJ,EAAMU,UCEvBC,EARuB,SAACX,GACnC,OACI,qBAAKM,UAAWC,IAAQK,QAAxB,SACKZ,EAAMY,W,0BCYbC,EAAcC,YAAiB,IA4C/BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAdsC,SAAChB,GAC/D,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACKC,YAAoC,qBAAsB,iBAAkBC,IAAU,CAACC,IAAUT,MAEtG,8BACI,kDASDU,EA5C6B,SAACvB,GAEzC,IAAIwB,EAAexB,EAAMyB,QAAQC,KAAI,SAAAlB,GAAM,OAAK,cAAC,EAAD,CAAYH,GAAIG,EAAOH,GAAoBK,KAAMF,EAAOE,MAAxBF,EAAOH,OACnFsB,EAAgB3B,EAAM4B,SAASF,KAAI,SAAAG,GAAE,OAAI,cAAC,EAAD,CAASxB,GAAIwB,EAAGxB,GAAIO,QAASiB,EAAGjB,SAAciB,EAAGxB,OAM9F,OACI,sBAAKC,UAAWC,IAAQkB,QAAxB,UACI,qBAAKnB,UAAWC,IAAQiB,aAAxB,SACKA,IAGL,sBAAKlB,UAAWC,IAAQqB,SAAxB,UACI,8BACKD,IAEL,cAACZ,EAAD,CAAqBG,SAdb,SAACY,GACjB9B,EAAM+B,YAAYD,EAAOE,0B,kCCZlBC,sBACXlC,aARkB,SAACL,GACnB,MAAO,CACH+B,QAAS/B,EAAMwC,YAAYT,QAC3BG,SAAUlC,EAAMwC,YAAYN,YAKP,CACrBG,YAAYI,IAAQC,gBAExBvC,IAJWoC,CAKbV","file":"static/js/4.e359d084.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__M95VY\",\"dialogsItems\":\"Dialogs_dialogsItems__2nFq3\",\"dialog\":\"Dialogs_dialog__1OLky\",\"active\":\"Dialogs_active__3UHKX\",\"messages\":\"Dialogs_messages__1VmHk\",\"message\":\"Dialogs_message__1a9NF\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<WCP>(Component: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as WCP}/>\r\n    }\r\n\r\n\r\nlet ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\nreturn ConnectedAuthRedirectComponent;\r\n}\r\n;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst DialogItem:React.FC<DialogType> = (props) => {\r\n    let path =\"/dialog/\" + props.id;\r\n    return (\r\n\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst Message:React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport type DialogsPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: (newMessageBody: string) => void,\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let dialogsItems = props.dialogs.map(dialog => (<DialogItem id={dialog.id} key={dialog.id} name={dialog.name}/>));\r\n    let messagesItems = props.messages.map(ms => <Message id={ms.id} message={ms.message} key={ms.id}/>);\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsItems}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    {messagesItems}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataValuesTypeKeys = Extract<keyof FormDataType, string>\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<FormDataValuesTypeKeys>(\"Enter your message\", 'newMessageBody', Textarea, [required, maxLength10])}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        sendMessage:actions.sendMessageAC\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}