{"version":3,"sources":["assets/images/user.png","components/Navbar/Navbar.module.css","redux/dialogs-reducer.tsx","components/Users/users.module.css","assets/images/preloader.svg","api/api.js","components/common/FormsControls/FormsControls.js","serviceWorker.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","utils/object-helpers.js","redux/users-reducer.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.tsx","redux/sidebar-reducer.tsx","redux/redux-store.tsx","App.tsx","hoc/withSuspense.tsx","index.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","components/common/Preloader/Preloader.js","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","hoc/withAuthRedirect.tsx","redux/profile-reducer.tsx"],"names":["module","exports","initialState","dialogs","id","name","messages","message","sendMessageAC","newMessageBody","type","dialogsReducer","state","action","body","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","getAuth","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","component","validators","text","validate","Boolean","window","location","hostname","match","log","classes","Navbar","nav","item","active","to","activeClassName","activeLink","News","Music","Settings","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","users","totalItemsCount","portionSize","isFetching","followingInProgress","toggleIsFetching","toggleIsFollowing","setCurrentPage","followSuccess","unfollowSuccess","usersReducer","followed","filter","Paginator","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","p","pageNumber","selectedPage","key","event","onPageChanged","User","user","unfollowThunkCreator","followThunkCreator","src","photos","small","userPhoto","disabled","some","Users","usersPage","getPageSize","getTotalItemsCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","getUsersThunkCreator","this","Preloader","React","Component","compose","connect","page","dispatch","a","totalCount","resultCode","withAuthRedirect","Header","header","alt","loginBlock","auth","isAuth","captchaUrl","setAuthUserData","setAuthCaptchaUrl","getAuthUserDataThunk","url","authReducer","HeaderContainer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","formSummaryError","length","stopSubmit","_error","initialized","appReducer","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","DialogsContainer","lazy","ProfileContainer","App","initializeAppThunk","path","render","fallback","AppContainer","withRouter","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","value","maxLengthCreator","maxLength","preloader","mapStateToPropsForRedirect","ADD_POST","posts","likeCount","addPostAC","newMyPost","setStatus","getUserProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","file","getState","Promise","reject","newPost","postId"],"mappings":"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","file":"static/js/main.021d8fd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.98fd41aa.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1KpQm\",\"item\":\"Navbar_item__1T86p\",\"activeLink\":\"Navbar_activeLink__1Dlvh\"};","import React from 'react';\r\n\r\nconst SEND_MESSAGE = \"DIALOGS/SEND-MESSAGE\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type MessagesPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type DialogsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: () => void\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Victor\"},\r\n        {id: 2, name: \"Valera\"},\r\n        {id: 3, name: \"Veronika\"},\r\n        {id: 4, name: \"Alex\"},\r\n        {id: 5, name: \"Dima\"},\r\n        {id: 6, name: \"Toxa\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"kikii\"},\r\n        {id: 4, message: \"Alex\"},\r\n        {id: 5, message: \"Dima\"},\r\n        {id: 6, message: \"Toxa\"}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: MessagesPagesType = initialState, action: DialogsReducersTypes) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type SendMessageActionType = {\r\n    type: \"DIALOGS/SEND-MESSAGE\",\r\n    newMessageBody: string\r\n}\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageActionType => ({\r\n    type: SEND_MESSAGE, newMessageBody\r\n})\r\n\r\nexport type DialogsReducersTypes = SendMessageActionType;\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__CIWxI\",\"selectedPage\":\"users_selectedPage__2fG4e\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.088f5f2e.svg\";","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'api-key': '8eaba7cd-8849-4eb5-b90f-f5fda0cd9786'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n\r\n    getProfile(userId) {\r\n        console.warn('Obsolute method. Please profileAPI object')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(photoFile) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put(`profile/photo`, formData)\r\n    },\r\n    saveProfile(profile) {\r\n        return instance.put(`profile/`, profile)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false, captcha = \"\") {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`,)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\nconst FormControl = ({input, meta:{touched,error}, children}) => {\r\n\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, component, validators, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validators}\r\n               {...props}\r\n        />{text}\r\n    </div>\r\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconsole.log(classes);\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to =\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={classes.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport  default Navbar;","import React from \"react\";\r\nimport classes from \"./News.module.css\"\r\n\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\"\r\n\r\n\r\nconst Music = (props: any) => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings = (props: any) => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import React from 'react';\r\nimport {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from '../utils/object-helpers';\r\n\r\nconst TOGGLE_IS_FETCHING = 'USERS/TOGGLE/IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'USERS/TOGGLE/IS_FOLLOWING_PROGRESS';\r\nconst SET_TOTAL_COUNT = 'USERS/SET_TOTAL_COUNT';\r\nconst SET_CURRENT_PAGE = 'USERS/SET_CURRENT_PAGE';\r\nconst SET_USERS = 'USERS/SET_USERS';\r\nconst FOLLOW = 'USERS/FOLLOW';\r\nconst UNFOLLOW = 'USERS/UNFOLLOW';\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    },\r\n    followed: boolean,\r\n    name: string,\r\n    location: {\r\n        city: string,\r\n        country: string\r\n    },\r\n    status: string\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalItemsCount: number,\r\n    portionSize:number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>\r\n}\r\nlet initialState = {\r\n    users: [\r\n        // {id: 1,photoUrl:\"https://www.nastol.com.ua/download.php?img=201212/1440x900/nastol.com.ua-37486.jpg\",followed: false, fullname: \"I'am a boss\", location: {city: \"Zhodino\", country: \"Belarus\"}},\r\n        // {id: 2,photoUrl:\"https://f3.upet.com/P_LOy49X6Hub_u.jpg\", followed: true, fullname: \"Viktor.S\", location: {city: \"Los Angeles\", country: \"USA\"}},\r\n        // {id: 3,photoUrl:\"https://wallbox.ru/resize/1024x768/wallpapers/main/201522/d05a059101136c6.jpg\", followed: false, fullname: \"Mihel.K\", location: {city: \"Barsuki\", country: \"Russia\"}},\r\n    ],\r\n    pageSize: 5,\r\n    totalItemsCount: 0,\r\n    currentPage: 1,\r\n    portionSize:10,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersType = initialState, action: UsersReducersTypes) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", {followed: true})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.id) {\r\n                //         return {...u, followed: true}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", {followed: false})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.id) {\r\n                //         return {...u, followed: false}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_COUNT:\r\n            return {...state, totalItemsCount: action.totalItemsCount}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type ToggleIsFetchingACType = {\r\n    type: 'USERS/TOGGLE/IS_FETCHING',\r\n    isFetching: boolean\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching: isFetching\r\n})\r\n\r\nexport type ToggleIsFollowingACType = {\r\n    type: 'USERS/TOGGLE/IS_FOLLOWING_PROGRESS',\r\n    isFetching: boolean,\r\n    userId: number\r\n}\r\n\r\nexport const toggleIsFollowing = (isFetching: boolean, userId: number): ToggleIsFollowingACType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: isFetching,\r\n    userId: userId\r\n})\r\n\r\nexport type SetTotalUsersCountACType = {\r\n    type: 'USERS/SET_TOTAL_COUNT',\r\n    totalItemsCount: number\r\n}\r\nexport const setTotalUsersCount = (totalItemsCount: number): SetTotalUsersCountACType => ({\r\n    type: SET_TOTAL_COUNT,\r\n    totalItemsCount: totalItemsCount\r\n})\r\n\r\nexport type SetCurrentPageACType = {\r\n    type: 'USERS/SET_CURRENT_PAGE',\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage: currentPage\r\n})\r\n\r\nexport type FollowACType = {\r\n    type: 'USERS/FOLLOW',\r\n    id: number\r\n}\r\nexport const followSuccess = (userId: number): FollowACType => ({\r\n    type: FOLLOW,\r\n    id: userId\r\n})\r\n\r\nexport type UnFollowACType = {\r\n    type: 'USERS/UNFOLLOW',\r\n    id: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnFollowACType => ({\r\n    type: UNFOLLOW,\r\n    id: userId\r\n})\r\n\r\nexport type SetUsersACType = {\r\n    type: 'USERS/SET_USERS',\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): SetUsersACType => ({\r\n    type: SET_USERS,\r\n    users: users\r\n})\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number) => async (dispatch: any) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize);\r\n\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n// const followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n//     dispatch(toggleIsFollowing(true, userId));\r\n//     let response = await apiMethod(userId);\r\n//\r\n//     if (response.data.resultCode === 0) {\r\n//         dispatch(actionCreator(userId))\r\n//     }\r\n//     dispatch(toggleIsFollowing(false, userId))\r\n// }\r\n\r\n\r\nexport const followThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    // let apiMethod = usersAPI.follow.bind(usersAPI);\r\n    // let actionCreator = followSuccess;\r\n    // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n    dispatch(toggleIsFollowing(true, userId))\r\n\r\n    let response = await usersAPI.follow(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(followSuccess(userId))\r\n    }\r\n    dispatch(toggleIsFollowing(false, userId))\r\n}\r\n\r\n\r\nexport const unfollowThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    // let apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n    // let actionCreator = unfollowSuccess;\r\n    // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n    dispatch(toggleIsFollowing(true, userId))\r\n\r\n    let response = await usersAPI.unfollow(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(unfollowSuccess(userId))\r\n    }\r\n    dispatch(toggleIsFollowing(false, userId))\r\n\r\n}\r\n\r\n\r\nexport type UsersReducersTypes =\r\n    FollowACType\r\n    | UnFollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingACType;\r\n\r\nexport default usersReducer;","import React, {useState} from 'react';\r\nimport styles from \"./Paginator.module.css\"\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number,\r\n    totalItemsCount: number,\r\n    currentPage: number,\r\n    portionSize: number,\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nlet Paginator = (props: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * props.portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n                return <span className={styles.pageNumber + \" \" + (props.currentPage === p ? styles.selectedPage : \"\")}\r\n                             key={p}\r\n                             onClick={(event) => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber && <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n}\r\nexport default Paginator;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsUserType = {\r\n    followingInProgress: Array<number>\r\n    user: UserType,\r\n    unfollowThunkCreator: (userId: number) => void\r\n    followThunkCreator: (userId: number) => void\r\n}\r\n\r\nlet User = ({user, followingInProgress, unfollowThunkCreator, followThunkCreator}: PropsUserType) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                    <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n\r\n                            unfollowThunkCreator(user.id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n\r\n                            followThunkCreator(user.id)\r\n\r\n                        }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                 <span>\r\n                     <div>{\"u.location.country\"}</div>\r\n                     <div>{\"u.location.city\"}</div>\r\n                 </span>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\ntype PropsUsType = {\r\n    followingInProgress: Array<number>\r\n    users: Array<UserType>,\r\n    followSuccess: (id: number) => void,\r\n    unfollowSuccess: (id: number) => void,\r\n    pageSize: number,\r\n    totalItemsCount: number,\r\n    currentPage: number,\r\n    portionSize:number,\r\n    onPageChanged: (pageNumber: number) => void\r\n    unfollowThunkCreator: (userId: number) => void\r\n    followThunkCreator: (userId: number) => void\r\n}\r\n\r\nlet Users = ({pageSize, totalItemsCount, currentPage,  portionSize, onPageChanged, ...props}: PropsUsType) => {\r\n\r\n    return <div>\r\n        <Paginator pageSize={pageSize} totalItemsCount={totalItemsCount} portionSize={portionSize} currentPage={currentPage} onPageChanged={onPageChanged}/>\r\n        <div>\r\n            {props.users.map(u => <User user={u}\r\n                                        key={u.id}\r\n                                        followingInProgress={props.followingInProgress}\r\n                                        followThunkCreator={props.followThunkCreator}\r\n                                        unfollowThunkCreator={props.unfollowThunkCreator}/>\r\n            )}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state:AppStateType)=>{\r\n    return  state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state:AppStateType)=>{\r\n    return    state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalItemsCount = (state:AppStateType)=>{\r\n    return    state.usersPage.totalItemsCount\r\n}\r\n\r\nexport const getCurrentPage = (state:AppStateType)=>{\r\n    return    state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state:AppStateType)=>{\r\n    return    state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state:AppStateType)=>{\r\n    return    state.usersPage.followingInProgress\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    followSuccess, followThunkCreator, getUsersThunkCreator,\r\n    setCurrentPage,\r\n    unfollowSuccess,\r\n    unfollowThunkCreator,\r\n    UserType\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalItemsCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalItemsCount: number,\r\n    currentPage: number,\r\n    portionSize: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n}\r\ntype mapDispatchToPropsType = {\r\n    followSuccess: (id: number) => void,\r\n    unfollowSuccess: (id: number) => void,\r\n    setCurrentPage: (currentPage: number) => void,\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void,\r\n    unfollowThunkCreator: (userId: number) => void,\r\n    followThunkCreator: (userId: number) => void\r\n}\r\ntype PropsUserType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component<any, PropsUserType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize, portionSize} = this.props;\r\n        this.props.getUsersThunkCreator(currentPage, pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        //     this.props.setTotalUsersCount(data.totalCount)\r\n        // });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {getUsersThunkCreator, pageSize} = this.props\r\n        getUsersThunkCreator(pageNumber, pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // this.props.setCurrentPage(pageNumber)\r\n        // usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalItemsCount={this.props.totalItemsCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   portionSize={this.props.portionSize}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   followSuccess={this.props.followSuccess}\r\n                   unfollowSuccess={this.props.unfollowSuccess}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   unfollowThunkCreator={this.props.unfollowThunkCreator}\r\n                   followThunkCreator={this.props.followThunkCreator}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n// let mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n//\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalItemsCount: getTotalItemsCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        portionSize: state.usersPage.portionSize,\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch: Dispatch<UsersReducersTypes>) => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (currentPage: number) => {\r\n//             dispatch(setCurrentPageAC(currentPage))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//\r\n//         }\r\n//     }\r\n// }\r\n// let AuthRedirect = withAuthRedirect(UsersContainer)\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        followSuccess,\r\n        unfollowSuccess,\r\n        setCurrentPage,\r\n        getUsersThunkCreator,\r\n        followThunkCreator,\r\n        unfollowThunkCreator\r\n    }),\r\n    withAuthRedirect)(UsersContainer)\r\n\r\n// export default connect(mapStateToProps, {\r\n//     followSuccess,\r\n//     unfollowSuccess,\r\n//     setCurrentPage,\r\n//     getUsersThunkCreator,\r\n//     followThunkCreator,\r\n//     unfollowThunkCreator\r\n// })(AuthRedirect);","import React from \"react\";\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AuthType} from \"../../redux/auth-reducer\";\r\n\r\nexport type HeaderPropsType = {\r\n    auth: null | AuthType\r\n    logout: () => void\r\n}\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src=\"https://miro.medium.com/max/1200/1*OQOVtYZWdAqGkWmZT4_BFw.jpeg\" alt=\"\"/>\r\n            <div className={classes.loginBlock}>\r\n                {props.auth?.isAuth? <div>{props.auth.login} - <button onClick={props.logout}></button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\n\r\nconst SET_USER_DATA = \"AUTH/SET_USER_DATA\"\r\nconst SET_CAPTCHA_URL = \"AUTH/SET_CAPTCHA_URL\"\r\nexport type CaptchaType = {\r\n    captchaUrl: string\r\n}\r\nexport type AuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: boolean,\r\n    isAuth: boolean\r\n}\r\nexport type InitStateType = AuthType & CaptchaType\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    captchaUrl: \"\"\r\n}\r\n\r\nexport type SetUserDataACType = {\r\n    type: \"AUTH/SET_USER_DATA\",\r\n    data: AuthType\r\n}\r\n\r\nexport const setAuthUserData = (id: null, email: null, login: null, isFetching: boolean, isAuth: boolean): SetUserDataACType => ({\r\n    type: SET_USER_DATA,\r\n    data: {id, email, login, isFetching, isAuth}\r\n})\r\n\r\nexport type SetCaptchaUrlACType = {\r\n    type: \"AUTH/SET_CAPTCHA_URL\",\r\n    data: CaptchaType\r\n}\r\n\r\nexport const setAuthCaptchaUrl = (captchaUrl: string): SetCaptchaUrlACType => ({\r\n    type: SET_CAPTCHA_URL,\r\n    data: {captchaUrl}\r\n})\r\n\r\n// export const getAuthUserDataThunk = () => (dispatch: any) => {\r\n//     return authAPI.getAuth()\r\n//         .then(response => {\r\n//         if (response.data.resultCode === 0) {\r\n//             let {id, login, email, isFetching, isAuth} = response.data.data\r\n//             dispatch(setAuthUserData(id, login, email, isFetching, true))\r\n//         }\r\n//     });\r\n// }\r\nexport const getAuthUserDataThunk = () => async (dispatch: any) => {\r\n    let response = await authAPI.getAuth();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email, isFetching, isAuth} = response.data.data\r\n        dispatch(setAuthUserData(id, login, email, isFetching, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n    let response = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserDataThunk())\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n    let response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url\r\n    debugger\r\n    dispatch(setAuthCaptchaUrl(captchaUrl))\r\n}\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false, false))\r\n    }\r\n}\r\n\r\nexport type OwnUserDataReducersTypes = SetUserDataACType | SetCaptchaUrlACType\r\n\r\nexport const authReducer = (state: InitStateType = initialState, action: OwnUserDataReducersTypes) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthType, getAuthUserDataThunk, logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    auth: null | AuthType\r\n}\r\ntype MapDispatchPropsType = {\r\n    getAuthUserDataThunk: () => void\r\n    logout: () => void\r\n}\r\n\r\nexport type AuthPropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass HeaderContainer extends React.Component<any, AuthPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} auth={this.props.auth} logout={this.props.logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    auth: state.auth\r\n})\r\nexport default connect(mapStateToProps, {getAuthUserDataThunk,logout})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport styles from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype CaptchaUrlType = {\r\n    captchaUrl: string\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, CaptchaUrlType> & CaptchaUrlType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", 'email', Input, [required])}\r\n            {createField(\"Password\", 'password', Input, [required], {type: \"password\"})}\r\n            {createField(null, 'rememberMe', Input, [], {type: \"checkbox\"}, \"remember me\")}\r\n            {/*<Field placeholder={'Email'} name={'email'} component={Input} validate={[required]}/>*/}\r\n            {/*<div>*/}\r\n            {/*    <Field placeholder={'Password'} name={'password'} component={Input} validate={[required]}*/}\r\n            {/*           type={\"password\"}/>*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me*/}\r\n            {/*</div>*/}\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField(\"Symbols from image\", 'captcha', Input, [])}\r\n\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, CaptchaUrlType>({form: 'login'})(LoginForm)\r\n\r\nexport const Login = (props: any) => {\r\n    const onsubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onsubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserDataThunk} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED-SUCCESS\";\r\n\r\nexport type InitializedAuthType = {\r\n    initialized: boolean\r\n}\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitializedSuccesACType = {\r\n    type: \"INITIALIZED-SUCCESS\"\r\n\r\n}\r\n\r\nexport const initializedSucces = (): InitializedSuccesACType => {\r\n    return {\r\n        type: \"INITIALIZED-SUCCESS\"\r\n    }\r\n}\r\n\r\nexport const initializeAppThunk = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserDataThunk());\r\n    promise.then(() => {\r\n        dispatch(initializedSucces());\r\n    });\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitializedAuthType = initialState, action: InitializedSuccesACType) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import React from 'react';\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState) => {\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore, Store} from \"redux\";\r\nimport reducer, { reducer as formReducer } from 'redux-form'\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport appReducer from \"./app-reducer\";\r\n// declare global {\r\n//     interface Window {\r\n//         __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n//     }\r\n// }\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth:authReducer,\r\n    form:formReducer,\r\n    app:appReducer\r\n});\r\n// export type IGlobalState = ReturnType<typeof reducers>;\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// const store:Store = createStore(reducers,composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport let store: Store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n// @ts-ignore\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;\r\n","import React, {Suspense} from 'react';\nimport './App.css';\nimport {BrowserRouter, HashRouter, Route, withRouter} from 'react-router-dom';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {compose} from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeAppThunk, InitializedAuthType} from \"./redux/app-reducer\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\nlet mapStateToProps = (state: AppStateType): InitializedAuthType => ({\n    initialized: state.app.initialized\n})\n\ntype MapDispatchPropsType = {\n    getAuthUserDataThunk: () => void\n\n}\n// type AppType = {\n//     store: Store\n//     dispatch: (action: AddPostActionType | UpdateNewPostTextActionType | UpdateNewMessageBodyActionType | SendMessageActionType) => void\n// }\n\nclass App extends React.Component<any, MapDispatchPropsType> {\n    componentDidMount() {\n        this.props.initializeAppThunk()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs' render={() => {\n                        return <Suspense fallback={<div>Загрузка...</div>}>\n                            <DialogsContainer/>\n                        </Suspense>\n                    }}/>\n                    <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nlet AppContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, {initializeAppThunk}),\n    withRouter)(App);\n\nconst SamuraiJSApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default SamuraiJSApp;\n","import React, {ComponentType, Suspense} from \"react\";\r\n\r\nexport const withSuspense = (Component: ComponentType) => {\r\n    return (props: any) => {\r\n        return <Suspense fallback={<div>Загрузка...</div>}>\r\n            <Component {...props}/>\r\n        </Suspense>\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SamuraiJSApp from \"./App\";\n\nReactDOM.render(\n    <SamuraiJSApp/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl___qzNh\",\"error\":\"FormsControls_error__31HZd\",\"formSummaryError\":\"FormsControls_formSummaryError__1zDUG\"};","export const required = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import preloader from \"../../../assets/images/preloader.svg\";\nimport React from \"react\";\n\nlet Preloader = () => {\n    return <div>\n        <img src={preloader}/>\n    </div>\n}\n\nexport default Preloader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3fCYT\",\"pageNumber\":\"Paginator_pageNumber__9_Q2y\",\"selectedPage\":\"Paginator_selectedPage__2qyGL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vImZ\",\"loginBlock\":\"Header_loginBlock__EIyyf\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType):MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component:ComponentType<T>) {\r\n    const RedirectComponent = (props:MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","import React from 'react';\r\nimport {PostType} from \"../components/Profile/MyPosts/MyPosts\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = \"PROFILE/ADD-POST\";\r\nconst DELETE_POST = \"PROFILE/DELETE-POST\";\r\nconst SET_USER_PROFILE = \"PROFILE/SET-USER-PROFILE\";\r\nconst SET_STATUS = \"PROFILE/SET-STATUS\";\r\nconst SAVE_PHOTO = \"PROFILE/SAVE-PHOTO\";\r\n\r\n\r\nexport type ContactsType = {\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string,\r\n    large: string\r\n}\r\nexport type ProfileInfoType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: null | ProfileInfoType\r\n    status: string\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likeCount: 12},\r\n        {id: 2, message: \"How are you?\", likeCount: 25},\r\n    ],\r\n    profile: null,\r\n    status: \"123\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducersTypes):ProfilePageType  => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostType = {id: 5, message: action.newMyPost, likeCount: 0};\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n        case SAVE_PHOTO: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileInfoType\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type SetUserProfileACType = {\r\n    type: \"PROFILE/SET-USER-PROFILE\",\r\n    profile: ProfileInfoType\r\n}\r\nexport const setUserProfile = (profile: ProfileInfoType): SetUserProfileACType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile: profile\r\n})\r\n\r\nexport type AddPostActionType = {\r\n    type: \"PROFILE/ADD-POST\",\r\n    newMyPost: string\r\n}\r\nexport const addPostAC = (newMyPost: string): AddPostActionType => ({\r\n    type: ADD_POST,\r\n    newMyPost\r\n})\r\n\r\nexport type DeletePostActionType = {\r\n    type: \"PROFILE/DELETE-POST\",\r\n    postId: number\r\n}\r\nexport const deletePostAC = (postId: number): DeletePostActionType => ({\r\n    type: DELETE_POST,\r\n    postId\r\n})\r\n\r\n\r\nexport type SetStatusACType = {\r\n    type: \"PROFILE/SET-STATUS\",\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): SetStatusACType => ({\r\n    type: SET_STATUS,\r\n    status: status\r\n})\r\n\r\nexport type SetPhotoSuccessACType = {\r\n    type: \"PROFILE/SAVE-PHOTO\",\r\n    photos: PhotosType\r\n}\r\nexport const setPhotoSuccess = (photos: PhotosType): SetPhotoSuccessACType => ({\r\n    type: SAVE_PHOTO,\r\n    photos\r\n})\r\n\r\nexport const getUserProfileThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data))\r\n}\r\n\r\nexport const getStatusThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateStatusThunkCreator = (status: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n    let response = await profileAPI.savePhoto(file)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setPhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: any) => async (dispatch: any,getState:any) => {\r\n    const userId = getState().auth.id\r\n    let response = await profileAPI.saveProfile(profile)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfileThunkCreator(userId))\r\n    }else {\r\n        // debugger\r\n        // let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport type ProfileReducersTypes =\r\n    AddPostActionType\r\n    | SetUserProfileACType\r\n    | SetStatusACType\r\n    | DeletePostActionType\r\n    | SetPhotoSuccessACType;\r\n\r\n\r\nexport default profileReducer;"],"sourceRoot":""}