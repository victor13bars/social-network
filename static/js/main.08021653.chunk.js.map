{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/dialogs-reducer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","serviceWorker.ts","redux/sidebar-reducer.tsx","redux/redux-store.tsx","index.tsx","components/Dialogs/Dialogs.module.css"],"names":["module","exports","Header","className","classes","header","src","alt","console","log","Navbar","nav","item","active","to","activeClassName","activeLink","ProfileInfo","img","descriptionBlock","initialState","posts","id","message","likeCount","messageForNewPost","profileReducer","state","action","type","newPost","push","newText","Post","props","MyPosts","postsElements","map","p","postsBlock","value","newPostText","onChange","e","text","currentTarget","updateNewPostText","onClick","addPost","MyPostsContainer","store","getState","dispatch","Profile","News","Music","Settings","dialogs","name","messages","newMessageBody","dialogsReducer","body","DialogItem","path","dialog","Message","Dialogs","dialogsItems","messagesItems","ms","target","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","updateNewMessageBodyCreator","App","render","component","Boolean","window","location","hostname","match","sidebarReducer","reducers","combineReducers","createStore","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.08021653.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1yGOj\",\"img\":\"ProfileInfo_img__3iXWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2PbKd\",\"posts\":\"MyPosts_posts__1RwQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vImZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CkvLJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1KpQm\",\"item\":\"Navbar_item__1T86p\",\"activeLink\":\"Navbar_activeLink__1Dlvh\"};","import React from \"react\";\r\nimport classes from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src=\"https://miro.medium.com/max/1200/1*OQOVtYZWdAqGkWmZT4_BFw.jpeg\" alt=\"\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport  default Header;","import React from \"react\";\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconsole.log(classes);\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to =\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={classes.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport  default Navbar;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={classes.img}\r\n                     src=\"https://avatars.mds.yandex.net/get-pdb/2797954/0e70c09d-6fa7-40ac-ba85-c36b467e8de5/s1200?webp=false\"\r\n                     alt=\"\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                Ava+description\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport {\r\n    AddPostActionType,\r\n    PostType, ProfilePageType, SendMessageActionType, UpdateNewMessageBodyActionType,\r\n    UpdateNewPostTextActionType\r\n} from \"./store\";\r\nimport {act} from \"react-dom/test-utils\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likeCount: 12},\r\n        {id: 2, message: \"How are you?\", likeCount: 25},\r\n    ],\r\n    messageForNewPost: \"\"\r\n}\r\n\r\nconst profileReducer = (state:ProfilePageType = initialState, action:AddPostActionType | UpdateNewPostTextActionType | UpdateNewMessageBodyActionType | SendMessageActionType) => {\r\n    switch (action.type){\r\n        case ADD_POST:\r\n            const newPost: PostType = {id: 5, message: state.messageForNewPost, likeCount: 0};\r\n            state.posts.push(newPost);\r\n            state.messageForNewPost = \"\";\r\n            return state;\r\n        case UPDATE_NEW_POST_TEXT:\r\n            state.messageForNewPost = action.newText;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addPostActionCreator = (): AddPostActionType => {\r\n    return {\r\n        type: ADD_POST\r\n    }\r\n}\r\nexport const updateNewPostTextActionCreator = (newText: string): UpdateNewPostTextActionType => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT, newText: newText\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType ={\r\n    id:number\r\n    message:string\r\n    likeCount:number\r\n}\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-pdb/750997/2f4a61ff-0c60-41d6-a2f1-049bc4ee8f21/s1200?webp=false\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {\r\n    AddPostActionType,\r\n    PostType,\r\n    UpdateNewPostTextActionType\r\n} from \"../../../redux/store\";\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n    addPost: () => void\r\n    updateNewPostText: (text:string) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n    let postsElements = props.posts.map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n        //props.dispatch(addPostActionCreator());\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewPostText(text);\r\n        //props.dispatch(updateNewPostTextActionCreator(text))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React, {ChangeEvent} from \"react\";\r\nimport {\r\n    AddPostActionType, PostType,\r\n    UpdateNewPostTextActionType\r\n} from \"../../../redux/store\";\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\ntype MyPostsContainerType = {\r\n    store: any\r\n}\r\n\r\nconst MyPostsContainer = (props: MyPostsContainerType) => {\r\n    console.log(props.store);\r\n\r\n    let state = props.store.getState();\r\n\r\n    let addPost = () => {\r\n        props.store.dispatch(addPostActionCreator());\r\n    }\r\n\r\n    let onPostChange = (text: string) => {\r\n        let action = updateNewPostTextActionCreator(text);\r\n        props.store.dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <MyPosts updateNewPostText={onPostChange} addPost={addPost} posts={state.profileReducer.posts}\r\n                 newPostText={state.profileReducer.newPostText}/>\r\n    )\r\n}\r\n\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport classes from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {AddPostActionType, ProfilePageType, UpdateNewPostTextActionType} from \"../../redux/store\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype ProfileType = {\r\n    store: any\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer store={props.store}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport classes from \"./News.module.css\"\r\n\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\"\r\n\r\n\r\nconst Music = (props: any) => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings = (props: any) => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport {\r\n    AddPostActionType,\r\n    MessagesPagesType,\r\n    SendMessageActionType, UpdateNewMessageBodyActionType, UpdateNewPostTextActionType\r\n} from \"./store\";\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Victor\"},\r\n        {id: 2, name: \"Valera\"},\r\n        {id: 3, name: \"Veronika\"},\r\n        {id: 4, name: \"Alex\"},\r\n        {id: 5, name: \"Dima\"},\r\n        {id: 6, name: \"Toxa\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"kikii\"},\r\n        {id: 4, message: \"Alex\"},\r\n        {id: 5, message: \"Dima\"},\r\n        {id: 6, message: \"Toxa\"}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state: MessagesPagesType = initialState, action: AddPostActionType | UpdateNewPostTextActionType | UpdateNewMessageBodyActionType | SendMessageActionType) => {\r\n    switch (action.type) {\r\n        case \"UPDATE-NEW-MESSAGE-BODY\":\r\n            state.newMessageBody = action.body;\r\n            return state;\r\n        case \"SEND-MESSAGE\":\r\n            let body = state.newMessageBody;\r\n            state.newMessageBody = \"\";\r\n            state.messages.push({id: 6, message: body});\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const sendMessageCreator = (): SendMessageActionType => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    }\r\n}\r\nexport const updateNewMessageBodyCreator = (body: string): UpdateNewMessageBodyActionType => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY, body: body\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path =\"/dialog/\" + props.id;\r\n    return (\r\n\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype MessageType = {\r\n    id:number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {MessagesPagesType} from \"../../redux/store\";\r\n\r\ntype DialogsType = {\r\n    state: MessagesPagesType\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\n    let dialogsItems = props.state.dialogs.map(dialog => (<DialogItem id={dialog.id} name={dialog.name}/>));\r\n    let messagesItems = props.state.messages.map(ms => <Message id={ms.id} message={ms.message}/>);\r\n    let newMessageBody = props.state.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n        //props.dispatch(sendMessageCreator())\r\n    }\r\n\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsItems}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>{messagesItems}</div>\r\n                <div><textarea value={newMessageBody}\r\n                               onChange={onNewMessageChange}\r\n                               placeholder=\"Enter your message \"></textarea></div>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {\r\n    AddPostActionType,\r\n    MessagesPagesType, SendMessageActionType,UpdateNewMessageBodyActionType,\r\n    UpdateNewPostTextActionType\r\n} from \"../../redux/store\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\n\r\ntype DialogsType = {\r\n    store: any\r\n}\r\n\r\nconst DialogsContainer = (props: DialogsType) => {\r\n   console.log(props.store)\r\n\r\n    let state = props.store.getState().dialogsReducer;\r\n\r\n    let onSendMessageClick = () => {props.store.dispatch(sendMessageCreator())}\r\n\r\n    let onNewMessageChange = (body:string) => {\r\n        props.store.dispatch(updateNewMessageBodyCreator(body))\r\n    }\r\n\r\n    return (\r\n       <Dialogs updateNewMessageBody={onNewMessageChange} sendMessage={onSendMessageClick} state={state}/>\r\n    )\r\n}\r\n\r\nexport default DialogsContainer;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {\n    AddPostActionType,\n    SendMessageActionType,\n    StateType,\n    UpdateNewMessageBodyActionType,\n    UpdateNewPostTextActionType\n} from \"./redux/store\";\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport dialogsReducer from \"./redux/dialogs-reducer\";\nimport {reducerType} from \"./redux/redux-store\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n\ntype AppType = {\n    store: any\n    dispatch: (action: AddPostActionType | UpdateNewPostTextActionType | UpdateNewMessageBodyActionType | SendMessageActionType) => void\n}\n\nfunction App(props: AppType) {\n    console.log(props.store);\n    return (\n        <BrowserRouter>\n            <div className='app-wrapper'>\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs' render={() => <DialogsContainer store={props.store} />}/>\n                    <Route path='/profile' render={() => <Profile store={props.store} />}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                </div>\n\n            </div>\n        </BrowserRouter>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {\r\n    AddPostActionType,\r\n    PostType, ProfilePageType,\r\n    UpdateNewPostTextActionType\r\n} from \"./store\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState) => {\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport {\r\n    AddPostActionType, MessagesPagesType,\r\n    ProfilePageType,\r\n    SendMessageActionType,\r\n    UpdateNewMessageBodyActionType,\r\n    UpdateNewPostTextActionType\r\n} from \"./store\";\r\n\r\nexport type reducerType = {\r\n    profileReducer: () => void,\r\n    dialogsReducer: () =>void,\r\n    sidebarReducer: () => void\r\n\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    sidebarReducer\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App store={store} dispatch={store.dispatch.bind(store)}/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n};\nrerenderEntireTree();\nstore.subscribe( () => {\n    rerenderEntireTree();\n});\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__M95VY\",\"dialogsItems\":\"Dialogs_dialogsItems__2nFq3\",\"dialog\":\"Dialogs_dialog__1OLky\",\"active\":\"Dialogs_active__3UHKX\",\"messages\":\"Dialogs_messages__1VmHk\",\"message\":\"Dialogs_message__1a9NF\"};"],"sourceRoot":""}