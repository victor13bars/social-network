{"version":3,"sources":["components/Navbar/Navbar.module.css","assets/images/user.png","assets/images/preloader.svg","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Navbar.tsx","redux/action.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/FormsControls/FormsControls.js","utils/validators/validators.js","components/Dialogs/Dialogs.tsx","api/api.js","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.js","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/sidebar-reducer.tsx","redux/users-reducer.tsx","redux/redux-store.tsx","index.tsx","components/common/FormsControls/FormsControls.module.css","components/Users/users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css"],"names":["module","exports","console","log","classes","ACTIONS_TYPE","Navbar","className","nav","item","active","to","activeClassName","activeLink","News","props","Music","Settings","DialogItem","path","id","dialog","name","Message","message","FormControl","input","meta","child","hasError","touched","error","styles","formControl","children","Textarea","restProps","Input","required","value","maxLengthCreator","maxLength","length","maxLength10","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogsItems","dialogs","map","key","messagesItems","messages","ms","values","sendMessage","newMessageBody","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","toggleIsFetching","isFetching","type","TOGGLE_IS_FETCHING","toggleIsFollowing","TOGGLE_IS_FOLLOWING_PROGRESS","followSuccess","FOLLOW","unfollowSuccess","UNFOLLOW","setStatus","SET_STATUS","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","compose","dialogsPage","dispatch","SEND_MESSAGE","sendMessageAC","Users","pagesCount","Math","ceil","totalUsersCount","pages","i","push","p","selectedPage","onClick","event","onPageChanged","users","u","src","photos","small","userPhoto","followed","disabled","followingInProgress","some","unfollowThunkCreator","followThunkCreator","Preloader","preloader","UsersContainer","pageNumber","getUsersThunkCreator","this","React","usersPage","setCurrentPage","SET_CURRENT_PAGE","items","SET_USERS","totalCount","SET_TOTAL_COUNT","resultCode","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateStatusThunkCreator","onStatusChange","e","currentTarget","prevProps","prevState","onDoubleClick","onChange","autoFocus","onBlur","ProfileInfo","profile","descriptionBlock","large","alt","aboutMe","lookingForAJobDescription","Post","likeCount","AddMyPostsFormRedux","MyPosts","posts","postsElements","postsBlock","addPost","newMyPost","MyPostsContainer","profilePage","ADD_POST","addPostAC","Profile","ProfileContainer","match","params","getUserProfileThunkCreator","getStatusThunkCreator","SET_USER_PROFILE","withRouter","Header","header","loginBlock","login","logout","initialState","setAuthUserData","getAuthUserDataThunk","authReducer","action","HeaderContainer","LoginReduxForm","formData","App","render","DialogsContainer","Boolean","window","location","hostname","profileReducer","newPost","messageForNewPost","dialogsReducer","body","sidebarReducer","usersReducer","filter","reducers","combineReducers","sidebar","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,oBCDrFD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCC3CD,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,IAAM,2B,oBCAjFD,EAAOC,QAAU,CAAC,KAAO,qB,qGCAzBD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,4HCGnNC,QAAQC,IAAIC,KAEZ,ICFYC,ED4BIC,EA1BD,WACX,OACI,yBAAKC,UAAWH,IAAQI,KACpB,yBAAKD,UAAS,UAAKH,IAAQK,KAAb,YAAqBL,IAAQM,SACvC,kBAAC,IAAD,CAASC,GAAI,WAAWC,gBAAiBR,IAAQS,YAAjD,YAEJ,yBAAKN,UAAWH,IAAQK,MACpB,kBAAC,IAAD,CAASE,GAAI,WAAWC,gBAAiBR,IAAQS,YAAjD,YAEJ,yBAAKN,UAAWH,IAAQK,MACpB,kBAAC,IAAD,CAASE,GAAI,SAASC,gBAAiBR,IAAQS,YAA/C,UAEJ,yBAAKN,UAAWH,IAAQK,MACpB,kBAAC,IAAD,CAASE,GAAI,QAAQC,gBAAiBR,IAAQS,YAA9C,SAEJ,yBAAKN,UAAWH,IAAQK,MACpB,kBAAC,IAAD,CAASE,GAAI,SAASC,gBAAiBR,IAAQS,YAA/C,UAEJ,yBAAKN,UAAWH,IAAQK,MACpB,kBAAC,IAAD,CAASE,GAAI,YAAYC,gBAAiBR,IAAQS,YAAlD,eEfDC,EANF,SAACC,GACV,OACI,sCCIOC,EAND,SAACD,GACX,OACI,uCCIOE,EANE,SAACF,GACd,OACI,0C,iBCaOG,EAVI,SAACH,GAChB,IAAII,EAAM,WAAaJ,EAAMK,GAC7B,OAEI,yBAAKb,UAAWH,IAAQiB,OAAS,IAAMjB,IAAQM,QAC3C,kBAAC,IAAD,CAASC,GAAIQ,GAAOJ,EAAMO,QCEvBC,EARC,SAACR,GACb,OACI,yBAAKR,UAAWH,IAAQoB,SACnBT,EAAMS,U,2CCRbC,EAAc,SAAC,GAAiC,EAAhCC,MAAiC,IAA1BC,EAAyB,EAAzBA,KAAeZ,GAAU,EAApBa,MAAoB,yCAC5CC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,yBAAKxB,UAAWyB,IAAOC,YAAc,KAAOJ,EAAWG,IAAOD,MAAQ,KAClE,6BACKhB,EAAMmB,UAEVL,GAAY,8BAAOF,EAAKI,SAIxBI,EAAW,SAACpB,GAAW,IACzBW,EAAmCX,EAAnCW,MAAsBU,GAAarB,EAA5BY,KAA4BZ,EAAvBa,MADY,YACWb,EADX,2BAE/B,OAAO,kBAAC,EAAgBA,EAAO,8CAAcW,EAAWU,MAG/CC,EAAQ,SAACtB,GAAW,IACtBW,EAAmCX,EAAnCW,MAAsBU,GAAarB,EAA5BY,KAA4BZ,EAAvBa,MADS,YACcb,EADd,2BAE5B,OAAO,kBAAC,EAAgBA,EAAO,2CAAWW,EAAWU,MCrB5CE,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cCc5BE,EAAcH,EAAiB,IAgD/BI,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EApBqC,SAAC9B,GAC9D,OACI,0BAAMgC,SAAUhC,EAAMiC,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWf,EACXb,KAAK,iBACL6B,YAAY,sBACnBC,SAAU,CAACd,EAASK,MAKxB,6BACI,6CASDU,EAjDC,SAACtC,GAEb,IAAIuC,EAAevC,EAAMwC,QAAQC,KAAI,SAAAnC,GAAM,OAAK,kBAAC,EAAD,CAAYD,GAAIC,EAAOD,GAAIqC,IAAKpC,EAAOD,GAAIE,KAAMD,EAAOC,UACpGoC,EAAgB3C,EAAM4C,SAASH,KAAI,SAAAI,GAAE,OAAI,kBAAC,EAAD,CAASxC,GAAIwC,EAAGxC,GAAII,QAASoC,EAAGpC,QAASiC,IAAKG,EAAGxC,QAO9F,OACI,yBAAKb,UAAWH,IAAQmD,SACpB,yBAAKhD,UAAWH,IAAQkD,cACnBA,GAGL,yBAAK/C,UAAWH,IAAQuD,UACpB,6BACKD,GAEL,kBAACd,EAAD,CAAqBG,SAfb,SAACc,GACjB3D,QAAQC,IAAI0D,GACZ9C,EAAM+C,YAAYD,EAAOE,sB,uBC1B3BC,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAINC,EAAW,WACsB,IAAjCC,EAAgC,uDAAlB,EAAGC,EAAe,uDAAJ,GACjC,OAAOR,EAASS,IAAT,qBAA2BF,EAA3B,kBAAgDC,IAAYE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAFxFN,EAAW,SAIbO,GACH,OAAOb,EAASc,KAAT,iBAAwBD,KAL1BP,EAAW,SAOXO,GACL,OAAOb,EAASe,OAAT,iBAA0BF,KAR5BP,EAAW,SAWTO,GAEP,OADA3E,QAAQ8E,KAAK,6CACNC,EAAWC,WAAWL,IAIxBI,EAAa,CACtBC,WADsB,SACXL,GACP,OAAOb,EAASS,IAAT,kBAAwBI,KAEnCM,UAJsB,SAIZN,GACN,OAAOb,EAASS,IAAT,yBAA+BI,KAE1CO,aAPsB,SAOTC,GACT,OAAOrB,EAASsB,IAAT,iBAA+B,CAACD,OAAQA,MAK1CE,EAAU,WAEf,OAAOvB,EAASS,IAAT,YAFFc,EAAU,SAIbC,EAAOC,GAA+B,IAArBC,EAAoB,wDACvC,OAAO1B,EAASc,KAAT,aAA4B,CAACU,QAAOC,WAAUC,gBALhDH,EAAU,WAQf,OAAOvB,EAASe,OAAT,gB,ST5CH1E,K,wCAAAA,E,4DAAAA,E,wCAAAA,E,0CAAAA,E,4BAAAA,E,sBAAAA,E,0BAAAA,E,4BAAAA,E,4CAAAA,E,gCAAAA,E,qCAAAA,M,KAoBL,IAAMsF,EAAmB,SAACC,GAC7B,MAAO,CACHC,KAAMxF,EAAayF,mBACnBF,WAAYA,IAUPG,EAAoB,SAACH,EAAqBf,GACnD,MAAO,CACHgB,KAAMxF,EAAa2F,6BACnBJ,WAAYA,EACZf,OAAQA,IAgCHoB,EAAgB,SAACpB,GAC1B,MAAO,CACHgB,KAAMxF,EAAa6F,OACnB9E,GAAIyD,IAQCsB,EAAkB,SAACtB,GAC5B,MAAO,CACHgB,KAAMxF,EAAa+F,SACnBhF,GAAIyD,IAyDCwB,EAAY,SAAChB,GACtB,MAAO,CACHQ,KAAMxF,EAAaiG,WACnBjB,OAAQA,IU1IZkB,EAA6B,SAACC,GAAD,MAA2C,CACxEC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAoBC,GAShC,OAFqCC,YAAQN,EAA2B,GAAnCM,EANX,SAAC9F,GACMA,EAAxB0F,OAD+C,IACpCrE,EADmC,YACtBrB,EADsB,YAEnD,OAAKA,EAAM0F,OACJ,kBAACG,EAAcxE,GADI,kBAAC,IAAD,CAAUzB,GAAI,cCRhD,IAcemG,cACXD,aAfkB,SAACL,GACnB,MAAO,CACHjD,QAASiD,EAAMO,YAAYxD,QAC3BI,SAAU6C,EAAMO,YAAYpD,aAGX,SAACqD,GACtB,MAAO,CACHlD,YAAa,SAACC,GACViD,EX8IiB,SAACjD,GAC1B,MAAO,CACH8B,KAAMxF,EAAa4G,aAAclD,kBWhJpBmD,CAAcnD,SAO/B4C,EAFWG,CAGbzD,G,4EC8Ca8D,GApDH,SAACpG,GAKT,IAJA,IAAIqG,EAAaC,KAAKC,KAAKvG,EAAMwG,gBAAkBxG,EAAMyD,UAErDgD,EAAQ,GAEHC,EAAI,EAAGA,GAAKL,EAAYK,IAC7BD,EAAME,KAAKD,GAEf,OAAO,6BACH,6BACKD,EAAMhE,KAAI,SAAAmE,GACP,OAAO,0BAAMpH,UAAWQ,EAAMwD,cAAgBoD,EAAI3F,KAAO4F,aAAe,GAC3DC,QAAS,SAACC,GACN/G,EAAMgH,cAAcJ,KACpBA,OAIxB5G,EAAMiH,MAAMxE,KAAI,SAAAyE,GAAC,OAAI,yBAAKxE,IAAKwE,EAAE7G,IAC9B,8BACI,6BACI,kBAAC,IAAD,CAAST,GAAI,YAAcsH,EAAE7G,IAC7B,yBAAK8G,IAAuB,MAAlBD,EAAEE,OAAOC,MAAgBH,EAAEE,OAAOC,MAAQC,KAAW9H,UAAWyB,KAAOqG,cAGrF,6BACKJ,EAAEK,SACG,4BAAQC,SAAUxH,EAAMyH,oBAAoBC,MAAK,SAAArH,GAAE,OAAIA,IAAO6G,EAAE7G,MAAKyG,QAAS,WAE5E9G,EAAM2H,qBAAqBT,EAAE7G,MAF/B,YAKA,4BAAQmH,SAAUxH,EAAMyH,oBAAoBC,MAAK,SAAArH,GAAE,OAAIA,IAAO6G,EAAE7G,MAAKyG,QAAS,WAE5E9G,EAAM4H,mBAAmBV,EAAE7G,MAF7B,YAOd,8BACI,8BACI,6BAAM6G,EAAE3G,MACR,6BAAM2G,EAAE5C,SAEX,8BACI,6BAAM,sBACN,6BAAM,2B,qBCxDZuD,GANC,WACZ,OAAO,6BACH,yBAAKV,IAAKW,SC8BZC,G,8MAYFf,cAAgB,SAACgB,GACb,EAAKhI,MAAMiI,qBAAqBD,EAAY,EAAKhI,MAAMyD,W,mEAVvDyE,KAAKlI,MAAMiI,qBAAqBC,KAAKlI,MAAMwD,YAAa0E,KAAKlI,MAAMyD,Y,+BAoBnE,OAAO,oCACFyE,KAAKlI,MAAM6E,WAAa,kBAAC,GAAD,MAAe,KACxC,kBAAC,GAAD,CAAO2B,gBAAiB0B,KAAKlI,MAAMwG,gBAC5B/C,SAAUyE,KAAKlI,MAAMyD,SACrBD,YAAa0E,KAAKlI,MAAMwD,YACxBwD,cAAekB,KAAKlB,cACpBC,MAAOiB,KAAKlI,MAAMiH,MAClB/B,cAAegD,KAAKlI,MAAMkF,cAC1BE,gBAAiB8C,KAAKlI,MAAMoF,gBAC5BqC,oBAAqBS,KAAKlI,MAAMyH,oBAChCE,qBAAsBO,KAAKlI,MAAM2H,qBACjCC,mBAAoBM,KAAKlI,MAAM4H,0B,GAlCrBO,IAAMtC,WA6EpBE,eACXD,aAtCkB,SAACL,GACnB,MAAO,CACHwB,MAAOxB,EAAM2C,UAAUnB,MACvBxD,SAAUgC,EAAM2C,UAAU3E,SAC1B+C,gBAAiBf,EAAM2C,UAAU5B,gBACjChD,YAAaiC,EAAM2C,UAAU5E,YAC7BqB,WAAYY,EAAM2C,UAAUvD,WAC5B4C,oBAAqBhC,EAAM2C,UAAUX,uBA+BhB,CACrBvC,gBACAE,kBACAiD,edvDsB,SAAC7E,GAC3B,MAAO,CACHsB,KAAMxF,EAAagJ,iBACnB9E,YAAaA,IcqDbyE,qBdyE4B,SAACzE,EAAqBC,GACtD,OAAO,SAACwC,GACJA,EAASrB,GAAiB,IAE1BrB,EAAkBC,EAAaC,GAAUE,MAAK,SAAAE,GAnG9B,IAACoD,EA9CUT,EAkJvBP,EAASrB,GAAiB,IAC1BqB,GArGagB,EAqGKpD,EAAK0E,MApGxB,CACHzD,KAAMxF,EAAakJ,UACnBvB,MAAOA,KAmGHhB,GApJuBO,EAoJK3C,EAAK4E,WAnJlC,CACH3D,KAAMxF,EAAaoJ,gBACnBlC,gBAAiBA,UckEjBoB,mBdoF0B,SAAC9D,GAC/B,OAAO,SAACmC,GACJA,EAASjB,GAAkB,EAAMlB,IACjCP,EAAgBO,GAAQH,MAAK,SAAAC,GACQ,IAA7BA,EAASC,KAAK8E,YACd1C,EAASf,EAAcpB,IAE3BmC,EAASjB,GAAkB,EAAOlB,Sc1FtC6D,qBd+F4B,SAAC7D,GACjC,OAAO,SAACmC,GACJA,EAASjB,GAAkB,EAAMlB,IACjCP,EAAkBO,GAAQH,MAAK,SAAAC,GACM,IAA7BA,EAASC,KAAK8E,YACd1C,EAASb,EAAgBtB,IAE7BmC,EAASjB,GAAkB,EAAOlB,WcpG1C8B,EATWG,CASOgC,I,qBClEPa,G,8MAlDXnD,MAAQ,CACJoD,UAAU,EACVvE,OAAQ,EAAKtE,MAAMsE,Q,EAGvBwE,iBAAmB,WACf,EAAKC,SAAS,CACVF,UAAU,K,EAIlBG,mBAAqB,WACjB,EAAKD,SAAS,CACVF,UAAU,IAEd,EAAK7I,MAAMiJ,yBAAyB,EAAKxD,MAAMnB,S,EAGnD4E,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACzE,OAAQ6E,EAAEC,cAAc5H,S,kEAIxB6H,EAAgBC,GAC3BD,EAAU/E,SAAW4D,KAAKlI,MAAMsE,QAChC4D,KAAKa,SAAS,CACVzE,OAAQ4D,KAAKlI,MAAMsE,W,+BAM3B,OACI,8BACM4D,KAAKzC,MAAMoD,UACb,6BACI,0BAAMU,cAAerB,KAAKY,kBAAmBZ,KAAKlI,MAAMsE,QAAU,qBAGrE4D,KAAKzC,MAAMoD,UACZ,6BACI,2BAAOW,SAAUtB,KAAKgB,eAAgBO,WAAW,EAAMC,OAAQxB,KAAKc,mBAC7DxH,MAAO0G,KAAKzC,MAAMnB,e,GA3CjB6D,IAAMtC,WC0BnB8D,GAtBK,SAAC3J,GACjB,OAAIA,EAAM4J,QAIN,6BAMI,yBAAKpK,UAAWH,KAAQwK,kBACpB,yBAAK1C,IAAKnH,EAAM4J,QAAQxC,OAAO0C,MAAOC,IAAI,KAC1C,6BAAM/J,EAAM4J,QAAQI,SACpB,6BAAMhK,EAAM4J,QAAQK,2BACpB,kBAAC,GAAD,CAAe3F,OAAQtE,EAAMsE,OAAQ2E,yBAA0BjJ,EAAMiJ,6BAbtE,kBAAC,GAAD,O,yCCaAiB,GAdF,SAAClK,GACV,OACI,yBAAKR,UAAWH,KAAQK,MACpB,yBACIyH,IAAI,sGACJ4C,IAAI,KACP/J,EAAMS,QACP,6BACI,sCADJ,IACuBT,EAAMmK,aCKnCvI,GAAcH,EAAiB,IA8C/B2I,GAAsBtI,YAAwB,CAACC,KAAM,uBAA/BD,EAdsC,SAAC9B,GAC/D,OACI,0BAAMgC,SAAUhC,EAAMiC,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWf,EAAUb,KAAK,YAAY6B,YAAY,kBAAkBC,SAAU,CAACd,EAASK,OAGnG,6BACI,iDAQDyI,GA/CC,SAACrK,GACbb,QAAQC,IAAIY,EAAMsK,OAClB,IAAIC,EAAgBvK,EAAMsK,MAAM7H,KAAI,SAAAmE,GAAC,OAAI,kBAAC,GAAD,CAAMvG,GAAIuG,EAAEvG,GAAII,QAASmG,EAAEnG,QAAS0J,UAAWvD,EAAEuD,eAiB1F,OACI,yBAAK3K,UAAWH,KAAQmL,YACpB,wCACA,kBAACJ,GAAD,CAAqBpI,SAPZ,SAACc,GACd9C,EAAMyK,QAAQ3H,EAAO4H,cAOjB,yBAAKlL,UAAWH,KAAQiL,OACnBC,KCDFI,GADU7E,aAbH,SAACL,GACnB,MAAO,CACH6E,MAAO7E,EAAMmF,YAAYN,UAGR,SAACrE,GACtB,MAAO,CACHwE,QAAS,SAACC,GACNzE,EnB8Fa,SAACyE,GACtB,MAAO,CACH5F,KAAMxF,EAAauL,SACnBH,amBjGaI,CAAUJ,QAKN5E,CAA6CuE,ICpBvDU,GATC,SAAC/K,GACb,OACI,6BACI,kBAAC,GAAD,CAAa4J,QAAS5J,EAAM4J,QAAStF,OAAQtE,EAAMsE,OAAQ2E,yBAA0BjJ,EAAMiJ,2BAC3F,kBAAC,GAAD,QCcN+B,G,qLAGE,IAAIlH,EAASoE,KAAKlI,MAAMiL,MAAMC,OAAOpH,OAChCA,IACDA,EAAS,GAEboE,KAAKlI,MAAMmL,2BAA2BrH,GACtCoE,KAAKlI,MAAMoL,sBAAsBtH,K,+BAIjC,OACI,6BACI,kBAAC,GAAD,iBAAaoE,KAAKlI,MAAlB,CAAyB4J,QAAS1B,KAAKlI,MAAM4J,QAAStF,OAAQ4D,KAAKlI,MAAMsE,OAAQ2E,yBAA0Bf,KAAKlI,MAAMiJ,iC,GAdvGd,IAAMtC,WAyBtBE,eACXD,aANkB,SAACL,GAAD,MAA6C,CAC/DmE,QAASnE,EAAMmF,YAAYhB,QAC3BtF,OAAQmB,EAAMmF,YAAYtG,UAID,CACrB6G,2BrB6DkC,SAACrH,GACvC,OAAO,SAACmC,GACJ1C,EAAoBO,GAAQH,MAAK,SAAAC,GATX,IAACgG,EAUnB3D,GAVmB2D,EAUKhG,EAASC,KATlC,CACHiB,KAAMxF,EAAa+L,iBACnBzB,QAASA,UqBxDTwB,sBrByG6B,SAACtH,GAClC,OAAO,SAACmC,GAEJ/B,EAAWE,UAAUN,GAChBH,MAAK,SAAAC,GAEFqC,EAASX,EAAU1B,EAASC,YqB9GpCoF,yBrBoHgC,SAAC3E,GACrC,OAAO,SAAC2B,GACJ/B,EAAWG,aAAaC,GACnBX,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAK8E,YACd1C,EAASX,EAAUhB,WqBvHnCgH,IACA1F,EAPWG,CAQbiF,I,oBC7CaO,GAbA,SAACvL,GAA4B,IAAD,EACvC,OACI,4BAAQR,UAAWH,KAAQmM,QACvB,yBAAKrE,IAAI,iEAAiE4C,IAAI,KAC9E,yBAAKvK,UAAWH,KAAQoM,aACnB,UAAAzL,EAAM2F,YAAN,eAAYD,QACP,6BAAM1F,EAAM2F,KAAK+F,MAAjB,MAA0B,4BAAQ5E,QAAS9G,EAAM2L,UACjD,kBAAC,IAAD,CAAS/L,GAAI,UAAb,Y,QCJlBgM,GAAe,CACfvL,GAAI,KACJoE,MAAO,KACPiH,MAAO,KACP7G,YAAY,EACZa,QAAQ,GAQCmG,GAAkB,SAACxL,EAAQoE,EAAWiH,EAAW7G,EAAmBa,GAC7E,MAAO,CACHZ,KAxBc,qBAyBdjB,KAAM,CAACxD,KAAGoE,QAAMiH,QAAM7G,aAAWa,YAI5BoG,GAAuB,kBAAM,SAAC7F,GACvCzB,IAAkBb,MAAK,SAAAC,GACnB,GAAiC,IAA7BA,EAASC,KAAK8E,WAAkB,CAAC,IAAD,EACS/E,EAASC,KAAKA,KAAlDxD,EAD2B,EAC3BA,GAAGqL,EADwB,EACxBA,MAAMjH,EADkB,EAClBA,MAAMI,EADY,EACZA,WADY,EACDa,OAC/BO,EAAS4F,GAAgBxL,EAAGqL,EAAMjH,EAAMI,GAAW,UAoChDkH,GAbY,WAAuE,IAAtEtG,EAAqE,uDAAnDmG,GAAcI,EAAqC,uCAC7F,OAAQA,EAAOlH,MACX,IA1Dc,qBA2DV,OAAO,gBACAW,EADP,GAEOuG,EAAOnI,MAGlB,QACI,OAAO4B,ICnDbwG,G,qLAEE/D,KAAKlI,MAAM8L,yB,+BAIX,OAAO,kBAAC,GAAD,iBAAY5D,KAAKlI,MAAjB,CAAwB2F,KAAMuC,KAAKlI,MAAM2F,KAAMgG,OAAQzD,KAAKlI,MAAM2L,c,GANnDxD,IAAMtC,WAarBC,gBAHS,SAACL,GAAD,MAA6C,CACjEE,KAAMF,EAAME,QAEwB,CAACmG,wBAAqBH,ODmBxC,kBAAM,SAAC1F,GACzBzB,IAAiBb,MAAK,SAAAC,GACe,IAA7BA,EAASC,KAAK8E,YACd1C,EAAS4F,GAAgB,KAAK,KAAK,MAAK,GAAM,UCtB3C/F,CAAwDmG,ICIjEC,GAAiBpK,YAAwB,CAACC,KAAM,SAA/BD,EApB6C,SAAC9B,GAEjE,OACI,0BAAMgC,SAAUhC,EAAMiC,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOE,YAAa,QAAS7B,KAAM,QAAS4B,UAAWb,EAAOe,SAAU,CAACd,MAE7E,6BACI,kBAACW,EAAA,EAAD,CAAOE,YAAa,WAAY7B,KAAM,WAAY4B,UAAWb,EAAOe,SAAU,CAACd,GAAWuD,KAAM,cAEpG,6BACI,kBAAC5C,EAAA,EAAD,CAAO4C,KAAM,WAAYvE,KAAM,aAAc4B,UAAWb,IAD5D,gBAGA,6BACI,8CAwBDwE,gBAJS,SAACL,GAAD,MAAyB,CAC7CC,OAAQD,EAAME,KAAKD,UAGgB,CAACgG,MFXnB,SAACjH,EAAcC,EAAiBC,GAAhC,OAAuD,SAACsB,GACzEzB,EAAcC,EAAOC,EAAUC,GAAYhB,MAAK,SAAAC,GACX,IAA7BA,EAASC,KAAK8E,YACd1C,EAAS6F,YEQNhG,EAhBM,SAAC9F,GAIlB,OAAGA,EAAM0F,OACE,kBAAC,IAAD,CAAU9F,GAAI,aAElB,6BACH,qCACA,kBAACsM,GAAD,CAAgBlK,SARH,SAACmK,GACdnM,EAAM0L,MAAMS,EAAS1H,MAAM0H,EAASzH,SAASyH,EAASxH,mBCC/CyH,OApBf,WACI,OACI,yBAAK5M,UAAU,eACX,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAOY,KAAK,WAAWiM,OAAQ,kBAAM,kBAACC,EAAD,SACrC,kBAAC,IAAD,CAAOlM,KAAK,oBAAoBiM,OAAQ,kBAAM,kBAAC,GAAD,SAC9C,kBAAC,IAAD,CAAOjM,KAAK,SAASiM,OAAQ,kBAAM,kBAAC,GAAD,SACnC,kBAAC,IAAD,CAAOjM,KAAK,QAAQ+B,UAAWpC,IAC/B,kBAAC,IAAD,CAAOK,KAAK,SAAS+B,UAAWlC,IAChC,kBAAC,IAAD,CAAOG,KAAK,YAAY+B,UAAWjC,IACnC,kBAAC,IAAD,CAAOE,KAAK,SAASiM,OAAQ,kBAAM,kBAAC,GAAD,YCnB/BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2D,uBCeFW,GAAe,CACftB,MAAO,CACH,CAACjK,GAAI,EAAGI,QAAS,QAAS0J,UAAW,IACrC,CAAC9J,GAAI,EAAGI,QAAS,eAAgB0J,UAAW,KAEhDP,QAAS,KACTtF,OAAQ,IA+BGqI,GA5BQ,WAA0E,IAAzElH,EAAwE,uDAA/CmG,GAAcI,EAAiC,uCAC5F,OAAQA,EAAOlH,MACX,KAAKxF,EAAauL,SACd,IAAM+B,EAAoB,CAACvM,GAAI,EAAGI,QAASuL,EAAOtB,UAAWP,UAAW,GACxE,OAAO,gBACA1E,EADP,CAEIoH,kBAAmB,GACnBvC,MAAM,GAAD,oBAAM7E,EAAM6E,OAAZ,CAAmBsC,MAIhC,KAAKtN,EAAa+L,iBACd,OAAO,gBACA5F,EADP,CAEImE,QAASoC,EAAOpC,UAGxB,KAAKtK,EAAaiG,WACd,OAAO,gBACAE,EADP,CAEInB,OAAQ0H,EAAO1H,SAGvB,QACI,OAAOmB,IC7CfmG,GAAe,CACfpJ,QAAS,CACL,CAACnC,GAAI,EAAGE,KAAM,UACd,CAACF,GAAI,EAAGE,KAAM,UACd,CAACF,GAAI,EAAGE,KAAM,YACd,CAACF,GAAI,EAAGE,KAAM,QACd,CAACF,GAAI,EAAGE,KAAM,QACd,CAACF,GAAI,EAAGE,KAAM,SAElBqC,SAAU,CACN,CAACvC,GAAI,EAAGI,QAAS,SACjB,CAACJ,GAAI,EAAGI,QAAS,gBACjB,CAACJ,GAAI,EAAGI,QAAS,SACjB,CAACJ,GAAI,EAAGI,QAAS,QACjB,CAACJ,GAAI,EAAGI,QAAS,QACjB,CAACJ,GAAI,EAAGI,QAAS,UAiBVqM,GAbQ,WAA4E,IAA3ErH,EAA0E,uDAA/CmG,GAAcI,EAAiC,uCAC9F,OAAQA,EAAOlH,MACX,KAAKxF,EAAa4G,aACd,IAAI6G,EAAOf,EAAOhJ,eAClB,OAAO,gBACAyC,EADP,CAEI7C,SAAS,GAAD,oBAAM6C,EAAM7C,UAAZ,CAAsB,CAACvC,GAAI,EAAGI,QAASsM,OAEvD,QACI,OAAOtH,IC3CfmG,GAAe,GAMJoB,GAJe,WAA2B,IAA1BvH,EAAyB,uDAAjBmG,GAEnC,OAAOnG,GCePmG,GAAe,CACf3E,MAAO,GAKPxD,SAAU,EACV+C,gBAAiB,EACjBhD,YAAa,EACbqB,YAAY,EACZ4C,oBAAoB,IAkDTwF,GA/Ca,WAAkE,IAAjExH,EAAgE,uDAA7CmG,GAAcI,EAA+B,uCACzF,OAAQA,EAAOlH,MACX,KAAKxF,EAAa6F,OACd,OAAO,gBACAM,EADP,CAEIwB,MAAOxB,EAAMwB,MAAMxE,KAAI,SAAAyE,GACnB,OAAIA,EAAE7G,KAAO2L,EAAO3L,GACT,gBAAI6G,EAAX,CAAcK,UAAU,IAErBL,OAGnB,KAAK5H,EAAa+F,SACd,OAAO,gBACAI,EADP,CAEIwB,MAAOxB,EAAMwB,MAAMxE,KAAI,SAAAyE,GACnB,OAAIA,EAAE7G,KAAO2L,EAAO3L,GACT,gBAAI6G,EAAX,CAAcK,UAAU,IAErBL,OAGnB,KAAK5H,EAAakJ,UACd,OAAO,gBAAI/C,EAAX,CAAkBwB,MAAO+E,EAAO/E,QAEpC,KAAK3H,EAAagJ,iBACd,OAAO,gBAAI7C,EAAX,CAAkBjC,YAAawI,EAAOxI,cAE1C,KAAKlE,EAAaoJ,gBACd,OAAO,gBAAIjD,EAAX,CAAkBe,gBAAiBwF,EAAOxF,kBAE9C,KAAKlH,EAAayF,mBACd,OAAO,gBAAIU,EAAX,CAAkBZ,WAAYmH,EAAOnH,aAEzC,KAAKvF,EAAa2F,6BACd,OAAO,gBACAQ,EADP,CAEIgC,oBAAqBuE,EAAOnH,WAAP,uBACXY,EAAMgC,qBADK,CACeuE,EAAOlI,SACrC2B,EAAMgC,oBAAoByF,QAAO,SAAA7M,GAAE,OAAIA,GAAM2L,EAAOlI,YAGlE,QACI,OAAO2B,I,UCtEf0H,GAAWC,YAAgB,CAC3BxC,YAAa+B,GACb3G,YAAa8G,GACbO,QAASL,GACT5E,UAAW6E,GACXtH,KAAKoG,GACLhK,KAAKuL,OAIEC,GAAeC,YAAYL,GAASM,YAAgBC,OAE/DlB,OAAOe,MAAQA,GAEfpO,QAAQC,IAAIoN,OAAOe,OAKJA,UCrBfI,IAAStB,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUkB,MAAOA,IACb,kBAAC,GAAD,QAGRK,SAASC,eAAe,SN4HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrK,MAAK,SAAAsK,GACJA,EAAaC,gBAEdC,OAAM,SAAAnN,GACL7B,QAAQ6B,MAAMA,EAAMP,a,mBOhJ5BxB,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,mBCA3ED,EAAOC,QAAU,CAAC,UAAY,yBAAyB,aAAe,8B,mBCAtED,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,mBCAnED,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,8B","file":"static/js/main.1cd63650.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1KpQm\",\"item\":\"Navbar_item__1T86p\",\"activeLink\":\"Navbar_activeLink__1Dlvh\"};","module.exports = __webpack_public_path__ + \"static/media/user.98fd41aa.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.088f5f2e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1yGOj\",\"img\":\"ProfileInfo_img__3iXWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CkvLJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__M95VY\",\"dialogsItems\":\"Dialogs_dialogsItems__2nFq3\",\"dialog\":\"Dialogs_dialog__1OLky\",\"active\":\"Dialogs_active__3UHKX\",\"messages\":\"Dialogs_messages__1VmHk\",\"message\":\"Dialogs_message__1a9NF\"};","import React from \"react\";\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconsole.log(classes);\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to =\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={classes.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport  default Navbar;","import {UserType} from \"./users-reducer\";\r\nimport {ProfileInfoType} from \"./profile-reducer\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nexport enum ACTIONS_TYPE {\r\n    TOGGLE_IS_FETCHING = 'TOGGLE/IS_FETCHING',\r\n    TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE/IS_FOLLOWING_PROGRESS',\r\n    SET_TOTAL_COUNT = 'USERS/SET_TOTAL_COUNT',\r\n    SET_CURRENT_PAGE = 'USERS/SET_CURRENT_PAGE',\r\n    SET_USERS = 'USERS/SET_USERS',\r\n    FOLLOW = 'USERS/FOLLOW',\r\n    UNFOLLOW = 'USERS/UNFOLLOW',\r\n    ADD_POST = \"PROFILE/ADD-POST\",\r\n    SET_USER_PROFILE = \"PROFILE/SET-USER-PROFILE\",\r\n    SET_STATUS = \"PROFILE/SET-STATUS\",\r\n    SEND_MESSAGE = \"DIALOGS/SEND-MESSAGE\"\r\n}\r\n\r\n\r\nexport type ToggleIsFetchingACType = {\r\n    type: ACTIONS_TYPE.TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.TOGGLE_IS_FETCHING,\r\n        isFetching: isFetching\r\n    }\r\n}\r\n\r\nexport type ToggleIsFollowingACType = {\r\n    type: ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: boolean,\r\n    userId: number\r\n}\r\n\r\nexport const toggleIsFollowing = (isFetching: boolean, userId: number): ToggleIsFollowingACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching: isFetching,\r\n        userId: userId\r\n    }\r\n}\r\n\r\nexport type SetTotalUsersCountACType = {\r\n    type: ACTIONS_TYPE.SET_TOTAL_COUNT,\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_TOTAL_COUNT,\r\n        totalUsersCount: totalUsersCount\r\n\r\n    }\r\n}\r\n\r\nexport type SetCurrentPageACType = {\r\n    type: ACTIONS_TYPE.SET_CURRENT_PAGE,\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_CURRENT_PAGE,\r\n        currentPage: currentPage\r\n\r\n    }\r\n}\r\n\r\nexport type FollowACType = {\r\n    type: ACTIONS_TYPE.FOLLOW,\r\n    id: number\r\n}\r\nexport const followSuccess = (userId: number): FollowACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.FOLLOW,\r\n        id: userId\r\n    }\r\n}\r\n\r\nexport type UnFollowACType = {\r\n    type: ACTIONS_TYPE.UNFOLLOW,\r\n    id: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnFollowACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.UNFOLLOW,\r\n        id: userId\r\n    }\r\n}\r\n\r\nexport type SetUsersACType = {\r\n    type: ACTIONS_TYPE.SET_USERS,\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): SetUsersACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_USERS,\r\n        users: users\r\n    }\r\n}\r\n\r\nexport type UsersReducersTypes =\r\n    FollowACType\r\n    | UnFollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingACType;\r\n\r\nexport type SetUserProfileACType = {\r\n    type: ACTIONS_TYPE.SET_USER_PROFILE,\r\n    profile: ProfileInfoType\r\n}\r\nexport const setUserProfile = (profile: ProfileInfoType): SetUserProfileACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_USER_PROFILE,\r\n        profile: profile\r\n    }\r\n}\r\n\r\nexport const getUserProfileThunkCreator = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        usersAPI.getProfile(userId).then(response => {\r\n            dispatch(setUserProfile(response.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport type AddPostActionType = {\r\n    type: ACTIONS_TYPE.ADD_POST,\r\n    newMyPost: string\r\n}\r\nexport const addPostAC = (newMyPost:string): AddPostActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.ADD_POST,\r\n        newMyPost\r\n    }\r\n}\r\nexport type SetStatusACType = {\r\n    type: ACTIONS_TYPE.SET_STATUS,\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): SetStatusACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_STATUS,\r\n        status: status\r\n    }\r\n}\r\n\r\nexport type ProfileReducersTypes = AddPostActionType\r\n    | SetUserProfileACType\r\n    | SetStatusACType;\r\n\r\nexport type SendMessageActionType = {\r\n    type: ACTIONS_TYPE.SEND_MESSAGE,\r\n    newMessageBody: string\r\n}\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SEND_MESSAGE, newMessageBody\r\n    }\r\n}\r\n\r\nexport type DialogsReducersTypes = SendMessageActionType;\r\n\r\nexport const getStatusThunkCreator = (userId: number) => {\r\n    return (dispatch: any) => {\r\n\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                debugger\r\n                dispatch(setStatus(response.data))\r\n\r\n            });\r\n    }\r\n}\r\n\r\nexport const updateStatusThunkCreator = (status: string) => {\r\n    return (dispatch: any) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setStatus(status))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true))\r\n\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        });\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFollowing(true, userId))\r\n        usersAPI.follow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleIsFollowing(false, userId))\r\n        });\r\n    }\r\n}\r\n\r\nexport const unfollowThunkCreator = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFollowing(true, userId))\r\n        usersAPI.unfollow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n            }\r\n            dispatch(toggleIsFollowing(false, userId))\r\n        });\r\n    }\r\n}","import React from \"react\";\r\nimport classes from \"./News.module.css\"\r\n\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\"\r\n\r\n\r\nconst Music = (props: any) => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings = (props: any) => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path =\"/dialog/\" + props.id;\r\n    return (\r\n\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype MessageType = {\r\n    id:number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({input, meta,child, ...props}) =>{\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props) => {\r\n    const {input, meta,child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta,child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","export const required = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport type DialogsPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: (newMessageBody: string) => void,\r\n    isAuth: boolean\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsItems = props.dialogs.map(dialog => (<DialogItem id={dialog.id} key={dialog.id} name={dialog.name}/>));\r\n    let messagesItems = props.messages.map(ms => <Message id={ms.id} message={ms.message} key={ms.id}/>);\r\n\r\n    let addNewMessage = (values:FormDataType) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsItems}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    {messagesItems}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message \"\r\n                validate={[required,maxLength10]}/>\r\n                {/*<textarea value={newMessageBody}*/}\r\n                {/*          onChange={onNewMessageChange}*/}\r\n                {/*          placeholder=\"Enter your message \"></textarea>*/}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'api-key': '8eaba7cd-8849-4eb5-b90f-f5fda0cd9786'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n\r\n    getProfile(userId) {\r\n        console.warn('Obsolute method. Please profileAPI object')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`, )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType):MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component:ComponentType<T>) {\r\n    const RedirectComponent = (props:MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {DialogsReducersTypes, sendMessageAC} from \"../../redux/action\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<DialogsReducersTypes>) => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsUsType = {\r\n    followingInProgress: Array<number>\r\n    users: Array<UserType>,\r\n    followSuccess: (id: number) => void,\r\n    unfollowSuccess: (id: number) => void,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void\r\n    unfollowThunkCreator: (userId: number) => void\r\n    followThunkCreator: (userId: number) => void\r\n}\r\n\r\nlet Users = (props: PropsUsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? styles.selectedPage : \"\"}\r\n                             onClick={(event) => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n\r\n        </div>\r\n        {props.users.map(u => <div key={u.id}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + u.id}>\r\n                    <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n\r\n                            props.unfollowThunkCreator(u.id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n\r\n                            props.followThunkCreator(u.id)\r\n\r\n                        }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </span>\r\n                 <span>\r\n                     <div>{\"u.location.country\"}</div>\r\n                     <div>{\"u.location.city\"}</div>\r\n                 </span>\r\n            </span>\r\n        </div>)}\r\n    </div>\r\n}\r\nexport default Users;","import preloader from \"../../../assets/images/preloader.svg\";\nimport React from \"react\";\n\nlet Preloader = () => {\n    return <div>\n        <img src={preloader}/>\n    </div>\n}\n\nexport default Preloader;\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    followSuccess,\r\n    followThunkCreator,\r\n    getUsersThunkCreator,\r\n    setCurrentPage,\r\n    unfollowSuccess,\r\n    unfollowThunkCreator\r\n} from \"../../redux/action\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n}\r\ntype mapDispatchToPropsType = {\r\n    followSuccess: (id: number) => void,\r\n    unfollowSuccess: (id: number) => void,\r\n    setCurrentPage: (currentPage: number) => void,\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void,\r\n    unfollowThunkCreator: (userId: number) => void,\r\n    followThunkCreator: (userId: number) => void\r\n}\r\ntype PropsUserType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component<any, PropsUserType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        //     this.props.setTotalUsersCount(data.totalCount)\r\n        // });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsersThunkCreator(pageNumber, this.props.pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // this.props.setCurrentPage(pageNumber)\r\n        // usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   followSuccess={this.props.followSuccess}\r\n                   unfollowSuccess={this.props.unfollowSuccess}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   unfollowThunkCreator={this.props.unfollowThunkCreator}\r\n                   followThunkCreator={this.props.followThunkCreator}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch<UsersReducersTypes>) => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (currentPage: number) => {\r\n//             dispatch(setCurrentPageAC(currentPage))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//\r\n//         }\r\n//     }\r\n// }\r\n\r\n// let AuthRedirect = withAuthRedirect(UsersContainer)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        followSuccess,\r\n        unfollowSuccess,\r\n        setCurrentPage,\r\n        getUsersThunkCreator,\r\n        followThunkCreator,\r\n        unfollowThunkCreator\r\n    }),\r\n    withAuthRedirect)(UsersContainer)\r\n\r\n// export default connect(mapStateToProps, {\r\n//     followSuccess,\r\n//     unfollowSuccess,\r\n//     setCurrentPage,\r\n//     getUsersThunkCreator,\r\n//     followThunkCreator,\r\n//     unfollowThunkCreator\r\n// })(AuthRedirect);","import React, {ChangeEvent} from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nclass ProfileStatus extends React.Component<any> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatusThunkCreator(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value})\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"----------------\"}</span>\r\n                </div>\r\n                }\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\r\n                           value={this.state.status}></input>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus';\r\nimport {ProfilePropsType} from \"../Profile\";\r\n\r\n\r\n\r\nconst ProfileInfo = (props:ProfilePropsType) => {\r\n    if(!props.profile){\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img className={classes.img}*/}\r\n            {/*         src=\"https://avatars.mds.yandex.net/get-pdb/2797954/0e70c09d-6fa7-40ac-ba85-c36b467e8de5/s1200?webp=false\"*/}\r\n            {/*         alt=\"\"/>*/}\r\n            {/*</div>*/}\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.profile.photos.large} alt=\"\"/>\r\n                <div>{props.profile.aboutMe}</div>\r\n                <div>{props.profile.lookingForAJobDescription}</div>\r\n                <ProfileStatus status={props.status} updateStatusThunkCreator={props.updateStatusThunkCreator}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType ={\r\n    id:number\r\n    message:string\r\n    likeCount:number\r\n}\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-pdb/750997/2f4a61ff-0c60-41d6-a2f1-049bc4ee8f21/s1200?webp=false\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newMyPost: string\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newMyPost: string) => void\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst MyPosts = (props: MyPostsType) => {\r\n    console.log(props.posts)\r\n    let postsElements = props.posts.map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    // let onAddPost = () => {\r\n    //     props.addPost();\r\n    //     //props.dispatch(addPostActionCreator());\r\n    // }\r\n    //\r\n    // let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.currentTarget.value;\r\n    //     props.updateNewPostText(text);\r\n    //     //props.dispatch(updateNewPostTextActionCreator(text))\r\n    // }\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newMyPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddMyPostsFormRedux onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst AddMyPostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMyPost\" placeholder=\"Enter your post\" validate={[required,maxLength10]}/>\r\n                {/*<textarea value={props.newPostText} onChange={onPostChange}/>*/}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostsFormRedux = reduxForm<FormDataType>({form: 'profileAddNewMyPost'})(AddMyPostsForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC, ProfileReducersTypes} from \"../../../redux/action\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState();\r\n//\r\n//                     let addPost = () => {\r\n//                         store.dispatch(addPostActionCreator());\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = updateNewPostTextActionCreator(text);\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts updateNewPostText={onPostChange} addPost={addPost}\r\n//                                     posts={state.profileReducer.posts}\r\n//                                     newPostText={state.profileReducer.messageForNewPost}/>\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducersTypes>) => {\r\n    return {\r\n        addPost: (newMyPost: string) => {\r\n            dispatch(addPostAC(newMyPost));\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport classes from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfoType} from \"../../redux/profile-reducer\";\r\nimport {updateStatusThunkCreator} from \"../../redux/action\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: null | ProfileInfoType,\r\n    status: string,\r\n    updateStatusThunkCreator: (status: string) => void\r\n\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusThunkCreator={props.updateStatusThunkCreator}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusThunkCreator,\r\n    getUserProfileThunkCreator,\r\n    setUserProfile,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/action\";\r\nimport {ProfileInfoType} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter, Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: null | ProfileInfoType\r\n    status: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunkCreator: (userId: number) => void\r\n    getStatusThunkCreator: (userId: number) => void\r\n    updateStatusThunkCreator: (status:string) => void\r\n}\r\ntype PathParamsTYpe = {\r\n    userId: string\r\n}\r\ntype ProfilePropsType = MapDispatchPropsType & MapStatePropsType\r\ntype PropsType = RouteComponentProps<PathParamsTYpe> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<any, PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = 2\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getStatusThunkCreator(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatusThunkCreator={this.props.updateStatusThunkCreator}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        getStatusThunkCreator,\r\n        updateStatusThunkCreator\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfileThunkCreator})(WithUrlDataContainerComponent));","import React from \"react\";\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AuthType} from \"../../redux/auth-reducer\";\r\n\r\nexport type HeaderPropsType = {\r\n    auth: null | AuthType\r\n    logout: () => void\r\n}\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src=\"https://miro.medium.com/max/1200/1*OQOVtYZWdAqGkWmZT4_BFw.jpeg\" alt=\"\"/>\r\n            <div className={classes.loginBlock}>\r\n                {props.auth?.isAuth\r\n                    ? <div>{props.auth.login} - <button onClick={props.logout}></button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {authAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = \"AUTH-SET-USER-DATA\"\r\n\r\nexport type AuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: boolean,\r\n    isAuth: boolean\r\n}\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false\r\n}\r\n\r\nexport type SetUserDataACType = {\r\n    type: \"AUTH-SET-USER-DATA\",\r\n    data: AuthType\r\n}\r\n\r\nexport const setAuthUserData = (id:null,email:null,login:null,isFetching:boolean,isAuth:boolean): SetUserDataACType => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {id,email,login,isFetching,isAuth}\r\n    }\r\n}\r\n\r\nexport const getAuthUserDataThunk = () => (dispatch: any) => {\r\n    authAPI.getAuth().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            let {id,login,email,isFetching,isAuth} = response.data.data\r\n            dispatch(setAuthUserData(id,login,email,isFetching,true))\r\n        }\r\n    });\r\n}\r\n\r\nexport const login = (email:string, password:string, rememberMe:boolean) => (dispatch: any) => {\r\n    authAPI.login(email, password, rememberMe).then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserDataThunk())\r\n        }\r\n    });\r\n}\r\n\r\nexport const logout = () => (dispatch: any) => {\r\n    authAPI.logout().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null,null,null,false,false))\r\n        }\r\n    });\r\n}\r\n\r\nexport type OwnUserDataReducersTypes = SetUserDataACType\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: OwnUserDataReducersTypes) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthType, getAuthUserDataThunk, logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    auth: null | AuthType\r\n}\r\ntype MapDispatchPropsType = {\r\n    getAuthUserDataThunk: () => void\r\n    logout: () => void\r\n}\r\n\r\nexport type AuthPropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass HeaderContainer extends React.Component<any, AuthPropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserDataThunk()\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} auth={this.props.auth} logout={this.props.logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    auth: state.auth\r\n})\r\nexport default connect(mapStateToProps, {getAuthUserDataThunk,logout})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} component={Input} validate={[required]} type={\"password\"}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me\r\n            </div>\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nexport const Login = (props:any) => {\r\n    const onsubmit = (formData: FormDataType) => {\r\n        props.login(formData.email,formData.password,formData.rememberMe)\r\n    }\r\n    if(props.isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onsubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps,{login})(Login);","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\n\n\n// type AppType = {\n//     store: Store\n//     dispatch: (action: AddPostActionType | UpdateNewPostTextActionType | UpdateNewMessageBodyActionType | SendMessageActionType) => void\n// }\n\nfunction App() {\n    return (\n        <div className='app-wrapper'>\n            <HeaderContainer/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                <Route path='/users' render={() => <UsersContainer/>}/>\n                <Route path='/news' component={News}/>\n                <Route path='/music' component={Music}/>\n                <Route path='/settings' component={Settings}/>\n                <Route path='/login' render={() => <Login/>}/>\n            </div>\n\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {ACTIONS_TYPE, ProfileReducersTypes} from \"./action\";\r\nimport {PostType} from \"../components/Profile/MyPosts/MyPosts\";\r\n\r\nexport type ContactsType = {\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string,\r\n    large: string\r\n}\r\nexport type ProfileInfoType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: null | ProfileInfoType\r\n    status: string\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likeCount: 12},\r\n        {id: 2, message: \"How are you?\", likeCount: 25},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducersTypes) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.ADD_POST: {\r\n            const newPost: PostType = {id: 5, message: action.newMyPost, likeCount: 0};\r\n            return {\r\n                ...state,\r\n                messageForNewPost: \"\",\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case ACTIONS_TYPE.SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport {ACTIONS_TYPE, DialogsReducersTypes} from \"./action\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type MessagesPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type DialogsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: () => void\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Victor\"},\r\n        {id: 2, name: \"Valera\"},\r\n        {id: 3, name: \"Veronika\"},\r\n        {id: 4, name: \"Alex\"},\r\n        {id: 5, name: \"Dima\"},\r\n        {id: 6, name: \"Toxa\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"kikii\"},\r\n        {id: 4, message: \"Alex\"},\r\n        {id: 5, message: \"Dima\"},\r\n        {id: 6, message: \"Toxa\"}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: MessagesPagesType = initialState, action: DialogsReducersTypes) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;","import React from 'react';\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState) => {\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","import React from 'react';\r\nimport {ACTIONS_TYPE, UsersReducersTypes} from \"./action\";\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    },\r\n    followed: boolean,\r\n    name: string,\r\n    location: {\r\n        city: string,\r\n        country: string\r\n    },\r\n    status: string\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress:Array<number>\r\n}\r\nlet initialState = {\r\n    users: [\r\n        // {id: 1,photoUrl:\"https://www.nastol.com.ua/download.php?img=201212/1440x900/nastol.com.ua-37486.jpg\",followed: false, fullname: \"I'am a boss\", location: {city: \"Zhodino\", country: \"Belarus\"}},\r\n        // {id: 2,photoUrl:\"https://f3.upet.com/P_LOy49X6Hub_u.jpg\", followed: true, fullname: \"Viktor.S\", location: {city: \"Los Angeles\", country: \"USA\"}},\r\n        // {id: 3,photoUrl:\"https://wallbox.ru/resize/1024x768/wallpapers/main/201522/d05a059101136c6.jpg\", followed: false, fullname: \"Mihel.K\", location: {city: \"Barsuki\", country: \"Russia\"}},\r\n    ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress:[]\r\n}\r\n\r\nexport const usersReducer = (state: UsersType = initialState, action: UsersReducersTypes) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case ACTIONS_TYPE.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case ACTIONS_TYPE.SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case ACTIONS_TYPE.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case ACTIONS_TYPE.SET_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case ACTIONS_TYPE.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS:{\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress,action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n    }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth:authReducer,\r\n    form:formReducer\r\n});\r\n// export type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport let store: Store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n// @ts-ignore\r\nconsole.log(window.store)\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl___qzNh\",\"error\":\"FormsControls_error__31HZd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__CIWxI\",\"selectedPage\":\"users_selectedPage__2fG4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2PbKd\",\"posts\":\"MyPosts_posts__1RwQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vImZ\",\"loginBlock\":\"Header_loginBlock__EIyyf\"};"],"sourceRoot":""}