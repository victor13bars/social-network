{"version":3,"sources":["components/common/Paginator/Paginator.module.css","components/Users/users.module.css","assets/images/user.png","assets/images/preloader.svg","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","serviceWorker.ts","api/api.js","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/sidebar-reducer.tsx","utils/object-helpers.js","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.js","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","ADD_POST","initialState","posts","id","message","likeCount","profile","setStatus","type","profileReducer","state","action","newPost","newMyPost","filter","p","postId","dialogs","name","messages","dialogsReducer","body","newMessageBody","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","toggleIsFollowing","setCurrentPage","followSuccess","unfollowSuccess","usersReducer","followed","login","isAuth","setAuthUserData","getAuthUserDataThunk","dispatch","a","resultCode","authReducer","initialized","appReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","log","classes","Navbar","className","nav","item","active","to","activeClassName","activeLink","News","props","Music","Settings","DialogItem","path","dialog","Message","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","styles","formControl","Textarea","restProps","child","Input","createField","placeholder","component","validators","text","Field","validate","maxLength10","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Dialogs","dialogsItems","key","messagesItems","ms","values","sendMessage","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","compose","sendMessageAC","Paginator","pagesCount","Math","ceil","pages","i","push","selectedPage","onClick","event","onPageChanged","User","user","unfollowThunkCreator","followThunkCreator","src","photos","small","userPhoto","disabled","some","Users","Preloader","preloader","getUsers","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","getUsersThunkCreator","this","React","page","totalCount","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatusThunkCreator","ProfileInfo","descriptionBlock","large","alt","aboutMe","lookingForAJobDescription","Post","MyPosts","memo","postsElements","postsBlock","AddMyPostsFormRedux","addPost","MyPostsContainer","addPostAC","Profile","ProfileContainer","params","authorizedUserId","getUserProfileThunkCreator","getStatusThunkCreator","withRouter","Header","header","loginBlock","logout","HeaderContainer","LoginReduxForm","formSummaryError","stopSubmit","_error","formData","App","initializeAppThunk","render","DialogsContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.56fbf3bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2qyGL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__CIWxI\",\"selectedPage\":\"users_selectedPage__2fG4e\"};","module.exports = __webpack_public_path__ + \"static/media/user.98fd41aa.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.088f5f2e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1yGOj\",\"img\":\"ProfileInfo_img__3iXWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CkvLJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1KpQm\",\"item\":\"Navbar_item__1T86p\",\"activeLink\":\"Navbar_activeLink__1Dlvh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__M95VY\",\"dialogsItems\":\"Dialogs_dialogsItems__2nFq3\",\"dialog\":\"Dialogs_dialog__1OLky\",\"active\":\"Dialogs_active__3UHKX\",\"messages\":\"Dialogs_messages__1VmHk\",\"message\":\"Dialogs_message__1a9NF\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'api-key': '8eaba7cd-8849-4eb5-b90f-f5fda0cd9786'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n\r\n    getProfile(userId) {\r\n        console.warn('Obsolute method. Please profileAPI object')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`, )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {PostType} from \"../components/Profile/MyPosts/MyPosts\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = \"PROFILE/ADD-POST\";\r\nconst DELETE_POST = \"PROFILE/DELETE-POST\";\r\nconst SET_USER_PROFILE = \"PROFILE/SET-USER-PROFILE\";\r\nconst SET_STATUS = \"PROFILE/SET-STATUS\";\r\n\r\nexport type ContactsType = {\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string,\r\n    large: string\r\n}\r\nexport type ProfileInfoType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: null | ProfileInfoType\r\n    status: string\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likeCount: 12},\r\n        {id: 2, message: \"How are you?\", likeCount: 25},\r\n    ],\r\n    profile: null,\r\n    status: \"123\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducersTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostType = {id: 5, message: action.newMyPost, likeCount: 0};\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type SetUserProfileACType = {\r\n    type: \"PROFILE/SET-USER-PROFILE\",\r\n    profile: ProfileInfoType\r\n}\r\nexport const setUserProfile = (profile: ProfileInfoType): SetUserProfileACType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile: profile\r\n})\r\n\r\nexport type AddPostActionType = {\r\n    type: \"PROFILE/ADD-POST\",\r\n    newMyPost: string\r\n}\r\nexport const addPostAC = (newMyPost: string): AddPostActionType => ({\r\n    type: ADD_POST,\r\n    newMyPost\r\n})\r\n\r\nexport type DeletePostActionType = {\r\n    type: \"PROFILE/DELETE-POST\",\r\n    postId: number\r\n}\r\nexport const deletePostAC = (postId: number): DeletePostActionType => ({\r\n    type: DELETE_POST,\r\n    postId\r\n})\r\n\r\n\r\nexport type SetStatusACType = {\r\n    type: \"PROFILE/SET-STATUS\",\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): SetStatusACType => ({\r\n    type: SET_STATUS,\r\n    status: status\r\n})\r\n\r\nexport const getUserProfileThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data))\r\n}\r\n\r\nexport const getStatusThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateStatusThunkCreator = (status: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\nexport type ProfileReducersTypes =\r\n    AddPostActionType\r\n    | SetUserProfileACType\r\n    | SetStatusACType\r\n    | DeletePostActionType;\r\n\r\n\r\nexport default profileReducer;","import React from 'react';\r\n\r\nconst SEND_MESSAGE = \"DIALOGS/SEND-MESSAGE\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type MessagesPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type DialogsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: () => void\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Victor\"},\r\n        {id: 2, name: \"Valera\"},\r\n        {id: 3, name: \"Veronika\"},\r\n        {id: 4, name: \"Alex\"},\r\n        {id: 5, name: \"Dima\"},\r\n        {id: 6, name: \"Toxa\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"kikii\"},\r\n        {id: 4, message: \"Alex\"},\r\n        {id: 5, message: \"Dima\"},\r\n        {id: 6, message: \"Toxa\"}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: MessagesPagesType = initialState, action: DialogsReducersTypes) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type SendMessageActionType = {\r\n    type: \"DIALOGS/SEND-MESSAGE\",\r\n    newMessageBody: string\r\n}\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageActionType => ({\r\n    type: SEND_MESSAGE, newMessageBody\r\n})\r\n\r\nexport type DialogsReducersTypes = SendMessageActionType;\r\n\r\nexport default dialogsReducer;","import React from 'react';\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState) => {\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import React from 'react';\r\nimport {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from '../utils/object-helpers';\r\n\r\nconst TOGGLE_IS_FETCHING = 'USERS/TOGGLE/IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'USERS/TOGGLE/IS_FOLLOWING_PROGRESS';\r\nconst SET_TOTAL_COUNT = 'USERS/SET_TOTAL_COUNT';\r\nconst SET_CURRENT_PAGE = 'USERS/SET_CURRENT_PAGE';\r\nconst SET_USERS = 'USERS/SET_USERS';\r\nconst FOLLOW = 'USERS/FOLLOW';\r\nconst UNFOLLOW = 'USERS/UNFOLLOW';\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    },\r\n    followed: boolean,\r\n    name: string,\r\n    location: {\r\n        city: string,\r\n        country: string\r\n    },\r\n    status: string\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>\r\n}\r\nlet initialState = {\r\n    users: [\r\n        // {id: 1,photoUrl:\"https://www.nastol.com.ua/download.php?img=201212/1440x900/nastol.com.ua-37486.jpg\",followed: false, fullname: \"I'am a boss\", location: {city: \"Zhodino\", country: \"Belarus\"}},\r\n        // {id: 2,photoUrl:\"https://f3.upet.com/P_LOy49X6Hub_u.jpg\", followed: true, fullname: \"Viktor.S\", location: {city: \"Los Angeles\", country: \"USA\"}},\r\n        // {id: 3,photoUrl:\"https://wallbox.ru/resize/1024x768/wallpapers/main/201522/d05a059101136c6.jpg\", followed: false, fullname: \"Mihel.K\", location: {city: \"Barsuki\", country: \"Russia\"}},\r\n    ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersType = initialState, action: UsersReducersTypes) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", {followed: true})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.id) {\r\n                //         return {...u, followed: true}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", {followed: false})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.id) {\r\n                //         return {...u, followed: false}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type ToggleIsFetchingACType = {\r\n    type: 'USERS/TOGGLE/IS_FETCHING',\r\n    isFetching: boolean\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching: isFetching\r\n})\r\n\r\nexport type ToggleIsFollowingACType = {\r\n    type: 'USERS/TOGGLE/IS_FOLLOWING_PROGRESS',\r\n    isFetching: boolean,\r\n    userId: number\r\n}\r\n\r\nexport const toggleIsFollowing = (isFetching: boolean, userId: number): ToggleIsFollowingACType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: isFetching,\r\n    userId: userId\r\n})\r\n\r\nexport type SetTotalUsersCountACType = {\r\n    type: 'USERS/SET_TOTAL_COUNT',\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountACType => ({\r\n    type: SET_TOTAL_COUNT,\r\n    totalUsersCount: totalUsersCount\r\n})\r\n\r\nexport type SetCurrentPageACType = {\r\n    type: 'USERS/SET_CURRENT_PAGE',\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage: currentPage\r\n})\r\n\r\nexport type FollowACType = {\r\n    type: 'USERS/FOLLOW',\r\n    id: number\r\n}\r\nexport const followSuccess = (userId: number): FollowACType => ({\r\n    type: FOLLOW,\r\n    id: userId\r\n})\r\n\r\nexport type UnFollowACType = {\r\n    type: 'USERS/UNFOLLOW',\r\n    id: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnFollowACType => ({\r\n    type: UNFOLLOW,\r\n    id: userId\r\n})\r\n\r\nexport type SetUsersACType = {\r\n    type: 'USERS/SET_USERS',\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): SetUsersACType => ({\r\n    type: SET_USERS,\r\n    users: users\r\n})\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number) => async (dispatch: any) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize);\r\n\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n// const followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n//     dispatch(toggleIsFollowing(true, userId));\r\n//     let response = await apiMethod(userId);\r\n//\r\n//     if (response.data.resultCode === 0) {\r\n//         dispatch(actionCreator(userId))\r\n//     }\r\n//     dispatch(toggleIsFollowing(false, userId))\r\n// }\r\n\r\n\r\nexport const followThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    // let apiMethod = usersAPI.follow.bind(usersAPI);\r\n    // let actionCreator = followSuccess;\r\n    // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n    dispatch(toggleIsFollowing(true, userId))\r\n\r\n    let response = await usersAPI.follow(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(followSuccess(userId))\r\n    }\r\n    dispatch(toggleIsFollowing(false, userId))\r\n}\r\n\r\n\r\nexport const unfollowThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    // let apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n    // let actionCreator = unfollowSuccess;\r\n    // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n    dispatch(toggleIsFollowing(true, userId))\r\n\r\n    let response = await usersAPI.unfollow(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(unfollowSuccess(userId))\r\n    }\r\n    dispatch(toggleIsFollowing(false, userId))\r\n\r\n}\r\n\r\n\r\nexport type UsersReducersTypes =\r\n    FollowACType\r\n    | UnFollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingACType;\r\n\r\nexport default usersReducer;","import React from 'react';\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"AUTH/SET_USER_DATA\"\r\n\r\nexport type AuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: boolean,\r\n    isAuth: boolean\r\n}\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false\r\n}\r\n\r\nexport type SetUserDataACType = {\r\n    type: \"AUTH/SET_USER_DATA\",\r\n    data: AuthType\r\n}\r\n\r\nexport const setAuthUserData = (id: null, email: null, login: null, isFetching: boolean, isAuth: boolean): SetUserDataACType => ({\r\n    type: SET_USER_DATA,\r\n    data: {id, email, login, isFetching, isAuth}\r\n})\r\n\r\n// export const getAuthUserDataThunk = () => (dispatch: any) => {\r\n//     return authAPI.getAuth()\r\n//         .then(response => {\r\n//         if (response.data.resultCode === 0) {\r\n//             let {id, login, email, isFetching, isAuth} = response.data.data\r\n//             dispatch(setAuthUserData(id, login, email, isFetching, true))\r\n//         }\r\n//     });\r\n// }\r\nexport const getAuthUserDataThunk = () => async (dispatch: any) => {\r\n    let response = await authAPI.getAuth();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email, isFetching, isAuth} = response.data.data\r\n        dispatch(setAuthUserData(id, login, email, isFetching, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: any) => {\r\n\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserDataThunk())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false, false))\r\n    }\r\n}\r\n\r\nexport type OwnUserDataReducersTypes = SetUserDataACType\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: OwnUserDataReducersTypes) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserDataThunk} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED-SUCCESS\";\r\n\r\nexport type InitializedAuthType = {\r\n    initialized: boolean\r\n}\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitializedSuccesACType = {\r\n    type: \"INITIALIZED-SUCCESS\"\r\n\r\n}\r\n\r\nexport const initializedSucces = (): InitializedSuccesACType => {\r\n    return {\r\n        type: \"INITIALIZED-SUCCESS\"\r\n    }\r\n}\r\n\r\nexport const initializeAppThunk = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserDataThunk());\r\n    promise.then(() => {\r\n        dispatch(initializedSucces());\r\n    });\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitializedAuthType = initialState, action: InitializedSuccesACType) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth:authReducer,\r\n    form:formReducer,\r\n    app:appReducer\r\n});\r\n// export type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport let store: Store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n// @ts-ignore\r\nconsole.log(window.store)\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconsole.log(classes);\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to =\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={classes.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport  default Navbar;","import React from \"react\";\r\nimport classes from \"./News.module.css\"\r\n\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\"\r\n\r\n\r\nconst Music = (props: any) => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings = (props: any) => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path =\"/dialog/\" + props.id;\r\n    return (\r\n\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype MessageType = {\r\n    id:number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","export const required = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\nconst FormControl = ({input, meta:{touched,error}, children}) => {\r\n\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, component, validators, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validators}\r\n               {...props}\r\n        />{text}\r\n    </div>\r\n)","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport type DialogsPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: (newMessageBody: string) => void,\r\n    isAuth: boolean\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsItems = props.dialogs.map(dialog => (<DialogItem id={dialog.id} key={dialog.id} name={dialog.name}/>));\r\n    let messagesItems = props.messages.map(ms => <Message id={ms.id} message={ms.message} key={ms.id}/>);\r\n\r\n    let addNewMessage = (values:FormDataType) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsItems}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    {messagesItems}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message \"\r\n                validate={[required,maxLength10]}/>\r\n                {/*<textarea value={newMessageBody}*/}\r\n                {/*          onChange={onNewMessageChange}*/}\r\n                {/*          placeholder=\"Enter your message \"></textarea>*/}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType):MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component:ComponentType<T>) {\r\n    const RedirectComponent = (props:MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {DialogsReducersTypes, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<DialogsReducersTypes>) => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n","import React from 'react';\r\nimport styles from \"./Paginator.module.css\"\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nlet Paginator = (props: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        {pages.map(p => {\r\n            return <span className={props.currentPage === p ? styles.selectedPage : \"\"}\r\n                         onClick={(event) => {\r\n                             props.onPageChanged(p)\r\n                         }}>{p}</span>\r\n        })}\r\n    </div>\r\n}\r\nexport default Paginator;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsUserType = {\r\n    followingInProgress: Array<number>\r\n    user: UserType,\r\n    unfollowThunkCreator: (userId: number) => void\r\n    followThunkCreator: (userId: number) => void\r\n}\r\n\r\nlet User = ({user, followingInProgress, unfollowThunkCreator, followThunkCreator}: PropsUserType) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                    <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n\r\n                            unfollowThunkCreator(user.id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n\r\n                            followThunkCreator(user.id)\r\n\r\n                        }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                 <span>\r\n                     <div>{\"u.location.country\"}</div>\r\n                     <div>{\"u.location.city\"}</div>\r\n                 </span>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\ntype PropsUsType = {\r\n    followingInProgress: Array<number>\r\n    users: Array<UserType>,\r\n    followSuccess: (id: number) => void,\r\n    unfollowSuccess: (id: number) => void,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void\r\n    unfollowThunkCreator: (userId: number) => void\r\n    followThunkCreator: (userId: number) => void\r\n}\r\n\r\nlet Users = ({pageSize, totalUsersCount, currentPage, onPageChanged, ...props}: PropsUsType) => {\r\n\r\n    return <div>\r\n        <Paginator pageSize={pageSize} totalUsersCount={totalUsersCount} currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}/>\r\n        <div>\r\n            {props.users.map(u => <User user={u}\r\n                                        key={u.id}\r\n                                        followingInProgress={props.followingInProgress}\r\n                                        followThunkCreator={props.followThunkCreator}\r\n                                        unfollowThunkCreator={props.unfollowThunkCreator}/>\r\n            )}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;","import preloader from \"../../../assets/images/preloader.svg\";\nimport React from \"react\";\n\nlet Preloader = () => {\n    return <div>\n        <img src={preloader}/>\n    </div>\n}\n\nexport default Preloader;\n","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state:AppStateType)=>{\r\n    return  state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state:AppStateType)=>{\r\n    return    state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state:AppStateType)=>{\r\n    return    state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state:AppStateType)=>{\r\n    return    state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state:AppStateType)=>{\r\n    return    state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state:AppStateType)=>{\r\n    return    state.usersPage.followingInProgress\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    followSuccess, followThunkCreator, getUsersThunkCreator,\r\n    setCurrentPage,\r\n    unfollowSuccess,\r\n    unfollowThunkCreator,\r\n    UserType\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n}\r\ntype mapDispatchToPropsType = {\r\n    followSuccess: (id: number) => void,\r\n    unfollowSuccess: (id: number) => void,\r\n    setCurrentPage: (currentPage: number) => void,\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void,\r\n    unfollowThunkCreator: (userId: number) => void,\r\n    followThunkCreator: (userId: number) => void\r\n}\r\ntype PropsUserType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component<any, PropsUserType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.getUsersThunkCreator(currentPage, pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        //     this.props.setTotalUsersCount(data.totalCount)\r\n        // });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {getUsersThunkCreator,pageSize} = this.props\r\n        getUsersThunkCreator(pageNumber, pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // this.props.setCurrentPage(pageNumber)\r\n        // usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   followSuccess={this.props.followSuccess}\r\n                   unfollowSuccess={this.props.unfollowSuccess}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   unfollowThunkCreator={this.props.unfollowThunkCreator}\r\n                   followThunkCreator={this.props.followThunkCreator}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n// let mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n//\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch: Dispatch<UsersReducersTypes>) => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (currentPage: number) => {\r\n//             dispatch(setCurrentPageAC(currentPage))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//\r\n//         }\r\n//     }\r\n// }\r\n// let AuthRedirect = withAuthRedirect(UsersContainer)\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        followSuccess,\r\n        unfollowSuccess,\r\n        setCurrentPage,\r\n        getUsersThunkCreator,\r\n        followThunkCreator,\r\n        unfollowThunkCreator\r\n    }),\r\n    withAuthRedirect)(UsersContainer)\r\n\r\n// export default connect(mapStateToProps, {\r\n//     followSuccess,\r\n//     unfollowSuccess,\r\n//     setCurrentPage,\r\n//     getUsersThunkCreator,\r\n//     followThunkCreator,\r\n//     unfollowThunkCreator\r\n// })(AuthRedirect);","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\nexport type ProfileStatusWithHooksType = {\r\n    status: string,\r\n    updateStatusThunkCreator: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatusThunkCreator(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"----------------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatusThunkCreator}: ProfilePropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={profile.photos.large} alt=\"\"/>\r\n                <div>{profile.aboutMe}</div>\r\n                <div>{profile.lookingForAJobDescription}</div>\r\n                <ProfileStatusWithHooks status={status} updateStatusThunkCreator={updateStatusThunkCreator}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType ={\r\n    id:number\r\n    message:string\r\n    likeCount:number\r\n}\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-pdb/750997/2f4a61ff-0c60-41d6-a2f1-049bc4ee8f21/s1200?webp=false\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newMyPost: string\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newMyPost: string) => void\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log(props.posts)\r\n    let postsElements = props.posts.map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    // let onAddPost = () => {\r\n    //     props.addPost();\r\n    //     //props.dispatch(addPostActionCreator());\r\n    // }\r\n    //\r\n    // let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.currentTarget.value;\r\n    //     props.updateNewPostText(text);\r\n    //     //props.dispatch(updateNewPostTextActionCreator(text))\r\n    // }\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newMyPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddMyPostsFormRedux onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nconst AddMyPostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMyPost\" placeholder=\"Enter your post\"\r\n                       validate={[required, maxLength10]}/>\r\n                {/*<textarea value={props.newPostText} onChange={onPostChange}/>*/}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostsFormRedux = reduxForm<FormDataType>({form: 'profileAddNewMyPost'})(AddMyPostsForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, ProfileReducersTypes} from \"../../../redux/profile-reducer\";\r\n\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState();\r\n//\r\n//                     let addPost = () => {\r\n//                         store.dispatch(addPostActionCreator());\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = updateNewPostTextActionCreator(text);\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts updateNewPostText={onPostChange} addPost={addPost}\r\n//                                     posts={state.profileReducer.posts}\r\n//                                     newPostText={state.profileReducer.messageForNewPost}/>\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducersTypes>) => {\r\n    return {\r\n        addPost: (newMyPost: string) => {\r\n            dispatch(addPostAC(newMyPost));\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport classes from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfoType} from \"../../redux/profile-reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: null | ProfileInfoType,\r\n    status: string,\r\n    updateStatusThunkCreator: (status: string) => void\r\n\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusThunkCreator={props.updateStatusThunkCreator}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {\r\n    getStatusThunkCreator,\r\n    getUserProfileThunkCreator,\r\n    ProfileInfoType,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter, Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: null | ProfileInfoType\r\n    status: string\r\n    authorizedUserId: null\r\n    isAuth:boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunkCreator: (userId: number) => void\r\n    getStatusThunkCreator: (userId: number) => void\r\n    updateStatusThunkCreator: (status: string) => void\r\n}\r\ntype PathParamsTYpe = {\r\n    userId: string\r\n}\r\ntype ProfilePropsType = MapDispatchPropsType & MapStatePropsType\r\ntype PropsType = RouteComponentProps<PathParamsTYpe> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<any, PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getStatusThunkCreator(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusThunkCreator={this.props.updateStatusThunkCreator}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        getStatusThunkCreator,\r\n        updateStatusThunkCreator\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfileThunkCreator})(WithUrlDataContainerComponent));","import React from \"react\";\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AuthType} from \"../../redux/auth-reducer\";\r\n\r\nexport type HeaderPropsType = {\r\n    auth: null | AuthType\r\n    logout: () => void\r\n}\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src=\"https://miro.medium.com/max/1200/1*OQOVtYZWdAqGkWmZT4_BFw.jpeg\" alt=\"\"/>\r\n            <div className={classes.loginBlock}>\r\n                {props.auth?.isAuth? <div>{props.auth.login} - <button onClick={props.logout}></button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthType, getAuthUserDataThunk, logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    auth: null | AuthType\r\n}\r\ntype MapDispatchPropsType = {\r\n    getAuthUserDataThunk: () => void\r\n    logout: () => void\r\n}\r\n\r\nexport type AuthPropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass HeaderContainer extends React.Component<any, AuthPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} auth={this.props.auth} logout={this.props.logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    auth: state.auth\r\n})\r\nexport default connect(mapStateToProps, {getAuthUserDataThunk,logout})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport styles from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error,}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", 'email', Input, [required])}\r\n            {createField(\"Password\", 'password', Input, [required], {type: \"password\"})}\r\n            {createField(null, 'rememberMe', Input, [],{type:\"checkbox\"},\"remember me\")}\r\n            {/*<Field placeholder={'Email'} name={'email'} component={Input} validate={[required]}/>*/}\r\n            {/*<div>*/}\r\n            {/*    <Field placeholder={'Password'} name={'password'} component={Input} validate={[required]}*/}\r\n            {/*           type={\"password\"}/>*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me*/}\r\n            {/*</div>*/}\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nexport const Login = (props: any) => {\r\n    const onsubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onsubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\nimport './App.css';\nimport {Route, withRouter} from 'react-router-dom';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {initializeAppThunk, InitializedAuthType} from \"./redux/app-reducer\";\nimport {AppStateType} from \"./redux/redux-store\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\n\nlet mapStateToProps = (state: AppStateType): InitializedAuthType => ({\n    initialized: state.app.initialized\n})\n\ntype MapDispatchPropsType = {\n    getAuthUserDataThunk: () => void\n\n}\n// type AppType = {\n//     store: Store\n//     dispatch: (action: AddPostActionType | UpdateNewPostTextActionType | UpdateNewMessageBodyActionType | SendMessageActionType) => void\n// }\n\nclass App extends React.Component<any, MapDispatchPropsType> {\n    componentDidMount() {\n        this.props.initializeAppThunk()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        initializeAppThunk\n    }),\n    withRouter\n)(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl___qzNh\",\"error\":\"FormsControls_error__31HZd\",\"formSummaryError\":\"FormsControls_formSummaryError__1zDUG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2PbKd\",\"posts\":\"MyPosts_posts__1RwQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vImZ\",\"loginBlock\":\"Header_loginBlock__EIyyf\"};"],"sourceRoot":""}