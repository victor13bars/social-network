{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Users/users.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","assets/images/user.png","components/Header/Header.tsx","components/Navbar/Navbar.tsx","redux/action.ts","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/UsersC.tsx","components/Users/UsersContainer.tsx","App.tsx","serviceWorker.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/sidebar-reducer.tsx","redux/users-reducer.tsx","redux/redux-store.tsx","index.tsx"],"names":["module","exports","Header","className","classes","header","src","alt","console","log","ACTIONS_TYPE","Navbar","nav","item","active","to","activeClassName","activeLink","ProfileInfo","img","descriptionBlock","Post","props","message","likeCount","MyPosts","posts","postsElements","map","p","id","postsBlock","value","newPostText","onChange","e","text","currentTarget","updateNewPostText","onClick","addPost","MyPostsContainer","connect","state","profilePage","messageForNewPost","dispatch","newText","action","type","UPDATE_NEW_POST_TEXT","ADD_POST","Profile","News","Music","Settings","DialogItem","path","dialog","name","Message","Dialogs","dialogsItems","dialogs","key","messagesItems","messages","ms","newMessageBody","body","target","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","dialogsPage","UPDATE_NEW_MESSAGE_BODY","updateNewMessageBodyAC","SEND_MESSAGE","Users","onPageChanged","pageNumber","setCurrentPage","axios","get","pageSize","then","response","setUsers","data","items","this","currentPage","setTotalUsersCount","totalCount","pagesCount","Math","ceil","totalUsersCount","pages","i","push","styles","selectedPage","event","users","u","photos","small","userPhoto","followed","unfollow","follow","status","React","Component","usersPage","userId","FOLLOW","followAC","UNFOLLOW","unfollowAC","SET_USERS","setUsersAC","SET_CURRENT_PAGE","setCurrentPageAC","SET_TOTAL_COUNT","App","render","UsersContainer","component","Boolean","window","location","hostname","match","initialState","profileReducer","newPost","dialogsReducer","sidebarReducer","usersReducer","reducers","combineReducers","sidebar","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5b1940c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__M95VY\",\"dialogsItems\":\"Dialogs_dialogsItems__2nFq3\",\"dialog\":\"Dialogs_dialog__1OLky\",\"active\":\"Dialogs_active__3UHKX\",\"messages\":\"Dialogs_messages__1VmHk\",\"message\":\"Dialogs_message__1a9NF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1yGOj\",\"img\":\"ProfileInfo_img__3iXWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2PbKd\",\"posts\":\"MyPosts_posts__1RwQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__CIWxI\",\"selectedPage\":\"users_selectedPage__2fG4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vImZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CkvLJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1KpQm\",\"item\":\"Navbar_item__1T86p\",\"activeLink\":\"Navbar_activeLink__1Dlvh\"};","module.exports = __webpack_public_path__ + \"static/media/user.98fd41aa.png\";","import React from \"react\";\r\nimport classes from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src=\"https://miro.medium.com/max/1200/1*OQOVtYZWdAqGkWmZT4_BFw.jpeg\" alt=\"\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport  default Header;","import React from \"react\";\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconsole.log(classes);\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to =\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={classes.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport  default Navbar;","import {UserType} from \"./users-reducer\";\r\nexport enum ACTIONS_TYPE {\r\n    SET_TOTAL_COUNT ='USERS/SET_TOTAL_COUNT',\r\n    SET_CURRENT_PAGE ='USERS/SET_CURRENT_PAGE',\r\n    SET_USERS = 'USERS/SET_USERS',\r\n    FOLLOW = 'USERS/FOLLOW',\r\n    UNFOLLOW = 'USERS/UNFOLLOW',\r\n    ADD_POST = \"PROFILE/ADD-POST\",\r\n    UPDATE_NEW_POST_TEXT = \"PROFILE/UPDATE-NEW-POST-TEXT\",\r\n    SEND_MESSAGE = \"DIALOGS/SEND-MESSAGE\",\r\n    UPDATE_NEW_MESSAGE_BODY = \"DIALOGS/UPDATE-NEW-MESSAGE-BODY\"\r\n}\r\nexport type SetTotalUsersCountACType = {\r\n    type: ACTIONS_TYPE.SET_TOTAL_COUNT,\r\n    totalUsersCount:number\r\n}\r\nexport const setTotalUsersCountAC = (totalUsersCount:number): SetTotalUsersCountACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_TOTAL_COUNT,\r\n        totalUsersCount: totalUsersCount\r\n\r\n    }\r\n}\r\n\r\nexport type SetCurrentPageACType = {\r\n    type: ACTIONS_TYPE.SET_CURRENT_PAGE,\r\n    currentPage:number\r\n}\r\nexport const setCurrentPageAC = (currentPage:number): SetCurrentPageACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_CURRENT_PAGE,\r\n        currentPage: currentPage\r\n\r\n    }\r\n}\r\n\r\nexport type FollowACType = {\r\n    type: ACTIONS_TYPE.FOLLOW,\r\n    id: number\r\n}\r\nexport const followAC = (userId: number): FollowACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.FOLLOW,\r\n        id: userId\r\n    }\r\n}\r\n\r\nexport type UnFollowACType = {\r\n    type: ACTIONS_TYPE.UNFOLLOW,\r\n    id: number\r\n}\r\nexport const unfollowAC = (userId: number): UnFollowACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.UNFOLLOW,\r\n        id: userId\r\n    }\r\n}\r\n\r\nexport type SetUsersACType = {\r\n    type: ACTIONS_TYPE.SET_USERS,\r\n    users: Array<UserType>\r\n}\r\nexport const setUsersAC = (users:Array<UserType>): SetUsersACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_USERS,\r\n        users:users\r\n    }\r\n}\r\n\r\nexport type UsersReducersTypes = FollowACType | UnFollowACType | SetUsersACType | SetCurrentPageACType | SetTotalUsersCountACType;\r\n\r\nexport type AddPostActionType = {\r\n    type: ACTIONS_TYPE.ADD_POST\r\n}\r\nexport const addPostAC = (): AddPostActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.ADD_POST\r\n    }\r\n}\r\n\r\nexport type UpdateNewPostTextActionType = {\r\n    type: ACTIONS_TYPE.UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n}\r\nexport const updateNewPostTextAC = (newText: string): UpdateNewPostTextActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.UPDATE_NEW_POST_TEXT, newText: newText\r\n    }\r\n}\r\n\r\nexport type ProfileReducersTypes = UpdateNewPostTextActionType | AddPostActionType;\r\n\r\nexport type UpdateNewMessageBodyActionType = {\r\n    type: ACTIONS_TYPE.UPDATE_NEW_MESSAGE_BODY\r\n    body: string\r\n}\r\nexport const updateNewMessageBodyAC = (body: string): UpdateNewMessageBodyActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.UPDATE_NEW_MESSAGE_BODY, body: body\r\n    }\r\n}\r\n\r\nexport type SendMessageActionType = {\r\n    type: ACTIONS_TYPE.SEND_MESSAGE\r\n}\r\nexport const sendMessageAC = (): SendMessageActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SEND_MESSAGE\r\n    }\r\n}\r\n\r\nexport type DialogsReducersTypes = SendMessageActionType | UpdateNewMessageBodyActionType;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={classes.img}\r\n                     src=\"https://avatars.mds.yandex.net/get-pdb/2797954/0e70c09d-6fa7-40ac-ba85-c36b467e8de5/s1200?webp=false\"\r\n                     alt=\"\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                Ava+description\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType ={\r\n    id:number\r\n    message:string\r\n    likeCount:number\r\n}\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-pdb/750997/2f4a61ff-0c60-41d6-a2f1-049bc4ee8f21/s1200?webp=false\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\ntype MyPostsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n    addPost: () => void\r\n    updateNewPostText: (text:string) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n    console.log(props.posts)\r\n    let postsElements = props.posts.map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n        //props.dispatch(addPostActionCreator());\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewPostText(text);\r\n        //props.dispatch(updateNewPostTextActionCreator(text))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React, {ChangeEvent} from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC, ProfileReducersTypes, updateNewPostTextAC} from \"../../../redux/action\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState();\r\n//\r\n//                     let addPost = () => {\r\n//                         store.dispatch(addPostActionCreator());\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = updateNewPostTextActionCreator(text);\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts updateNewPostText={onPostChange} addPost={addPost}\r\n//                                     posts={state.profileReducer.posts}\r\n//                                     newPostText={state.profileReducer.messageForNewPost}/>\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.messageForNewPost\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducersTypes>) => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = updateNewPostTextAC(text);\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostAC());\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport classes from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype ProfileType = {\r\n    store: any\r\n}\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport classes from \"./News.module.css\"\r\n\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\"\r\n\r\n\r\nconst Music = (props: any) => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings = (props: any) => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path =\"/dialog/\" + props.id;\r\n    return (\r\n\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype MessageType = {\r\n    id:number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsType} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n    console.log(props)\r\n\r\n    let dialogsItems = props.dialogs.map(dialog => (<DialogItem id={dialog.id} key={dialog.id} name={dialog.name}/>));\r\n    let messagesItems = props.messages.map(ms => <Message id={ms.id} message={ms.message} key={ms.id}/>);\r\n    let newMessageBody = props.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n        //props.dispatch(sendMessageCreator())\r\n    }\r\n\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsItems}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>{messagesItems}</div>\r\n                <div><textarea value={newMessageBody}\r\n                               onChange={onNewMessageChange}\r\n                               placeholder=\"Enter your message \"></textarea></div>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {ChangeEvent, Consumer} from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {DialogsReducersTypes, sendMessageAC, updateNewMessageBodyAC} from \"../../redux/action\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages:state.dialogsPage.messages,\r\n        newMessageBody:state.dialogsPage.newMessageBody\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<DialogsReducersTypes>) => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;\r\n","import React from 'react';\r\nimport styles from \"./users.module.css\"\r\n// import * as axios from \"axios\";\r\nimport axios from \"axios\";\r\nimport userPhoto from \"../../assets/images/user.png\"\r\nimport {UserType} from \"../../redux/users-reducer\";\r\n\r\ntype PropsUserType = {\r\n    users: Array<UserType>,\r\n    follow: (id: number) => void,\r\n    unfollow: (id: number) => void,\r\n    setUsers: (users: Array<UserType>) => void,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n}\r\n\r\nclass Users extends React.Component<PropsUserType, any> {\r\n\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\r\n            this.props.setUsers(response.data.items)\r\n            this.props.setTotalUsersCount(response.data.totalCount)\r\n        });\r\n    }\r\n\r\n    // getUsers = () => {\r\n    //     if (this.props.users.length === 0) {\r\n    //         axios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(response => {\r\n    //             this.props.setUsers(response.data.items)\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\r\n            this.props.setUsers(response.data.items)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let pagesCount = Math.ceil(this.props.totalUsersCount / this.props.pageSize);\r\n\r\n        let pages = [];\r\n\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i)\r\n        }\r\n        return <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={this.props.currentPage === p ? styles.selectedPage : \"\"}\r\n                                 onClick={(event) => {\r\n                                     this.onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n\r\n            </div>\r\n            {this.props.users.map(u => <div key={u.id}>\r\n            <span>\r\n                <div>\r\n                    <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button onClick={() => {\r\n                            this.props.unfollow(u.id)\r\n                        }}>Unfollow</button>\r\n                        : <button onClick={() => {\r\n                            this.props.follow(u.id)\r\n                        }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n                <span>\r\n                <span>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </span>\r\n                 <span>\r\n                     <div>{\"u.location.country\"}</div>\r\n                     <div>{\"u.location.city\"}</div>\r\n                 </span>\r\n            </span>\r\n            </div>)}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport Users from \"./UsersC\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    followAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC,\r\n    unfollowAC,\r\n    UsersReducersTypes\r\n} from \"../../redux/action\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage:state.usersPage.currentPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<UsersReducersTypes>) => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(unfollowAC(userId))\r\n        },\r\n        setUsers:(users:Array<UserType>) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage:(currentPage:number)=>{\r\n            dispatch(setCurrentPageAC(currentPage))\r\n        },\r\n        setTotalUsersCount:(totalCount:number)=>{\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\n\n// type AppType = {\n//     store: Store\n//     dispatch: (action: AddPostActionType | UpdateNewPostTextActionType | UpdateNewMessageBodyActionType | SendMessageActionType) => void\n// }\n\nfunction App() {\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                <Route path='/profile' render={() => <Profile/>}/>\n                <Route path='/users' render={() => <UsersContainer />}/>\n                <Route path='/news' component={News}/>\n                <Route path='/music' component={Music}/>\n                <Route path='/settings' component={Settings}/>\n            </div>\n\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {ACTIONS_TYPE, ProfileReducersTypes} from \"./action\";\r\nimport {PostType} from \"../components/Profile/MyPosts/MyPosts\";\r\n\r\n\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    messageForNewPost: string\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likeCount: 12},\r\n        {id: 2, message: \"How are you?\", likeCount: 25},\r\n    ],\r\n    messageForNewPost: \"\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducersTypes) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.ADD_POST: {\r\n            const newPost: PostType = {id: 5, message: state.messageForNewPost, likeCount: 0};\r\n            return {\r\n                ...state,\r\n                messageForNewPost: \"\",\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case ACTIONS_TYPE.UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                messageForNewPost: action.newText\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\n\r\nimport {ACTIONS_TYPE, DialogsReducersTypes} from \"./action\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type MessagesPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n}\r\nexport type DialogsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Victor\"},\r\n        {id: 2, name: \"Valera\"},\r\n        {id: 3, name: \"Veronika\"},\r\n        {id: 4, name: \"Alex\"},\r\n        {id: 5, name: \"Dima\"},\r\n        {id: 6, name: \"Toxa\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"kikii\"},\r\n        {id: 4, message: \"Alex\"},\r\n        {id: 5, message: \"Dima\"},\r\n        {id: 6, message: \"Toxa\"}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state: MessagesPagesType = initialState, action: DialogsReducersTypes) => {\r\n\r\n\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        case ACTIONS_TYPE.SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: \"\",\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;","import React from 'react';\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState) => {\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","import React from 'react';\r\nimport {ACTIONS_TYPE, UsersReducersTypes} from \"./action\";\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    },\r\n    followed: boolean,\r\n    name: string,\r\n    location: {\r\n        city: string,\r\n        country: string\r\n    },\r\n    status: string\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number\r\n}\r\nlet initialState = {\r\n    users: [\r\n        // {id: 1,photoUrl:\"https://www.nastol.com.ua/download.php?img=201212/1440x900/nastol.com.ua-37486.jpg\",followed: false, fullname: \"I'am a boss\", location: {city: \"Zhodino\", country: \"Belarus\"}},\r\n        // {id: 2,photoUrl:\"https://f3.upet.com/P_LOy49X6Hub_u.jpg\", followed: true, fullname: \"Viktor.S\", location: {city: \"Los Angeles\", country: \"USA\"}},\r\n        // {id: 3,photoUrl:\"https://wallbox.ru/resize/1024x768/wallpapers/main/201522/d05a059101136c6.jpg\", followed: false, fullname: \"Mihel.K\", location: {city: \"Barsuki\", country: \"Russia\"}},\r\n    ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1\r\n}\r\n\r\nexport const usersReducer = (state: UsersType = initialState, action: UsersReducersTypes) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case ACTIONS_TYPE.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case ACTIONS_TYPE.SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case ACTIONS_TYPE.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case ACTIONS_TYPE.SET_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import {combineReducers, createStore, Store} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer\r\n});\r\n// export type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport let store: Store = createStore(reducers);\r\n// @ts-ignore\r\nwindow.store = store;\r\n// @ts-ignore\r\nconsole.log(window.store)\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}