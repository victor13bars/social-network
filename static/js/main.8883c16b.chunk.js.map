{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","App.tsx","serviceWorker.ts","redux/state.ts","index.tsx"],"names":["module","exports","Header","className","classes","header","src","alt","console","log","Navbar","nav","item","active","to","activeClassName","activeLink","Post","props","message","likeCount","MyPosts","postsElements","posts","map","p","id","postsBlock","value","newPostText","onChange","e","updateNewPostText","currentTarget","onClick","addPost","ProfileInfo","img","descriptionBlock","Profile","profilePage","messageForNewPost","DialogItem","path","dialog","name","Message","Dialogs","dialogsItems","state","dialogs","messagesItems","messages","ms","News","Music","Settings","App","render","dialogsPage","component","Boolean","window","location","hostname","match","rerenderEntireTree","sidebar","newPost","push","newText","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8883c16b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1KpQm\",\"item\":\"Navbar_item__1T86p\",\"activeLink\":\"Navbar_activeLink__1Dlvh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__M95VY\",\"dialogsItems\":\"Dialogs_dialogsItems__2nFq3\",\"dialog\":\"Dialogs_dialog__1OLky\",\"active\":\"Dialogs_active__3UHKX\",\"messages\":\"Dialogs_messages__1VmHk\",\"message\":\"Dialogs_message__1a9NF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2PbKd\",\"posts\":\"MyPosts_posts__1RwQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1yGOj\",\"img\":\"ProfileInfo_img__3iXWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vImZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CkvLJ\"};","import React from \"react\";\r\nimport classes from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src=\"https://miro.medium.com/max/1200/1*OQOVtYZWdAqGkWmZT4_BFw.jpeg\" alt=\"\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport  default Header;","import React from \"react\";\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconsole.log(classes);\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to =\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={classes.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport  default Navbar;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType ={\r\n    id:number\r\n    message:string\r\n    likeCount:number\r\n}\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-pdb/750997/2f4a61ff-0c60-41d6-a2f1-049bc4ee8f21/s1200?webp=false\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/state\";\r\n\r\ntype MyPostsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n    addPost: () => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n    let postsElements = props.posts.map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = (e:ChangeEvent<HTMLTextAreaElement>)=>{props.updateNewPostText(e.currentTarget.value)}\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={classes.img}\r\n                     src=\"https://avatars.mds.yandex.net/get-pdb/2797954/0e70c09d-6fa7-40ac-ba85-c36b467e8de5/s1200?webp=false\"\r\n                     alt=\"\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                Ava+description\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {PostType, ProfilePageType} from \"../../redux/state\";\r\n\r\ntype ProfileType = {\r\n    profilePage: ProfilePageType\r\n    addPost: () => void\r\n    updateNewPostText:(newText: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPosts posts={props.profilePage.posts}\r\n                     newPostText={props.profilePage.messageForNewPost}\r\n                     addPost={props.addPost}\r\n                     updateNewPostText={props.updateNewPostText}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path =\"/dialog/\" + props.id;\r\n    return (\r\n\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype MessageType = {\r\n    id:number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {MessagesPagesType} from \"../../redux/state\";\r\n\r\n\r\n\r\ntype DialogsType = {\r\n  state:MessagesPagesType\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\n\r\n    let dialogsItems = props.state.dialogs.map(dialog => (<DialogItem id={dialog.id} name={dialog.name}/>));\r\n\r\n    let messagesItems = props.state.messages.map(ms => <Message id={ms.id} message={ms.message}/>);\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsItems}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                {messagesItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport classes from \"./News.module.css\"\r\n\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\"\r\n\r\n\r\nconst Music = (props: any) => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings = (props: any) => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {StateType} from \"./redux/state\";\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\n\ntype AppType = {\n    state: StateType\n    addPost: () => void\n    updateNewPostText:(newText: string) => void\n}\n\nfunction App(props: AppType) {\n\n    return (\n        <BrowserRouter>\n            <div className='app-wrapper'>\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs' render={() => <Dialogs state={props.state.dialogsPage}/>}/>\n                    <Route path='/profile' render={() => <Profile profilePage={props.state.profilePage} addPost={props.addPost}                       updateNewPostText={props.updateNewPostText}/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                </div>\n\n            </div>\n        </BrowserRouter>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let rerenderEntireTree = () => {\r\n    console.log(\"State change\");\r\n}\r\n\r\nexport type SidebarType = {}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    messageForNewPost: string\r\n}\r\n\r\nexport type MessagesPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type StateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: MessagesPagesType\r\n    sidebar: SidebarType\r\n}\r\n\r\nexport let state: StateType = {\r\n    profilePage: {\r\n        posts: [\r\n            {id: 1, message: \"Hello\", likeCount: 12},\r\n            {id: 2, message: \"How are you?\", likeCount: 25},\r\n        ],\r\n        messageForNewPost: \"\"\r\n    },\r\n    dialogsPage: {\r\n        dialogs: [\r\n            {id: 1, name: \"Victor\"},\r\n            {id: 2, name: \"Valera\"},\r\n            {id: 3, name: \"Veronika\"},\r\n            {id: 4, name: \"Alex\"},\r\n            {id: 5, name: \"Dima\"},\r\n            {id: 6, name: \"Toxa\"}\r\n        ],\r\n        messages: [\r\n            {id: 1, message: \"Hello\"},\r\n            {id: 2, message: \"How are you?\"},\r\n            {id: 3, message: \"kikii\"},\r\n            {id: 4, message: \"Alex\"},\r\n            {id: 5, message: \"Dima\"},\r\n            {id: 6, message: \"Toxa\"}\r\n        ]\r\n    },\r\n    sidebar: {}\r\n\r\n}\r\n\r\nexport const addPost = () => {\r\n    const newPost: PostType = {id: 5, message: state.profilePage.messageForNewPost, likeCount: 0};\r\n    state.profilePage.posts.push(newPost);\r\n    state.profilePage.messageForNewPost = \"\";\r\n    rerenderEntireTree();\r\n}\r\n\r\nexport const updateNewPostText = (newText: string) => {\r\n    state.profilePage.messageForNewPost = newText;\r\n    rerenderEntireTree();\r\n}\r\n\r\nexport const subscribe = (observer: () => void) => {\r\n    rerenderEntireTree = observer;\r\n}\r\n\r\nexport default state;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport state, {addPost, StateType, subscribe, updateNewPostText} from \"./redux/state\";\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App state={state} addPost={addPost} updateNewPostText={updateNewPostText}/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n};\nrerenderEntireTree();\nsubscribe(rerenderEntireTree);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}