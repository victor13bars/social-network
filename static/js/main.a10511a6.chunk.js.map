{"version":3,"sources":["assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/api.ts","assets/images/user.png","components/Users/users.module.css","serviceWorker.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/user-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","redux/users-selectors.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["Preloader","src","preloader","module","exports","required","value","maxLengthCreator","maxLength","length","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","profile","initialState","posts","id","message","likeCount","actions","setUserProfile","type","addPostAC","newMyPost","deletePostAC","postId","setStatus","setPhotoSuccess","photos","getUserProfileTC","dispatch","a","getStatusTC","updateStatusTC","resultCode","ResultCodeEnum","Success","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessageAC","newMessageBody","dialogsReducer","body","ResultCodeForCaptcha","axios","create","withCredentials","baseURL","headers","Boolean","window","location","hostname","match","News","props","Music","Settings","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isFetching","isAuth","captchaUrl","getAuthUserDataThunk","meData","getCaptchaUrl","url","authReducer","initialized","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","usersAPI","currentPage","pageSize","term","friend","users","totalItemsCount","portionSize","followingInProgress","payload","getUsersTC","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Component","fallback","Paginator","onPageChanged","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","cn","styles","paginator","onClick","pageNumber","selectedPage","event","User","user","unfollow","follow","to","small","userPhoto","disabled","some","userSearchFormValidate","values","UserSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","getUsers","getPageSize","getTotalItemsCount","getCurrentPage","getIsFetching","getFollowingInProgress","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","followTC","unfollowTC","UserPage","pageTitle","LoginReduxForm","reduxForm","handleSubmit","error","createField","Input","undefined","formSummaryError","Login","loginData","CaptchaIsRequired","Header","Layout","AppHeader","span","theme","mode","defaultSelectedKeys","Item","style","backgroundColor","icon","UserOutlined","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","SubMenu","Menu","Content","Footer","Sider","App","catchAllUnhandledErrors","e","alert","this","initializeAppThunk","addEventListener","removeEventListener","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","from","path","render","component","textAlign","AppContainer","compose","connect","withRouter","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","text"],"mappings":"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","file":"static/js/main.a10511a6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.9e95fc3c.svg\";","import preloader from \"../../../assets/images/preloader.svg\";\nimport React from \"react\";\n\nlet Preloader:React.FC = () => {\n    return <div>\n        <img src={preloader}/>\n    </div>\n}\n\nexport default Preloader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3fCYT\",\"pageNumber\":\"Paginator_pageNumber__9_Q2y\",\"selectedPage\":\"Paginator_selectedPage__2qyGL\"};","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number):FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import {PhotosType, ProfileInfoType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileInfoType>(`profile/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status})\r\n            .then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<PhotosType>>(`profile/photo`, formData)\r\n            .then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileInfoType) {\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/`, profile)\r\n            .then(res => res.data)\r\n    }\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileInfoType} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {ResultCodeEnum} from \"../api/api\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\n\r\nexport type ProfileInitialStateType = typeof initialState;\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likeCount: 12},\r\n        {id: 2, message: \"How are you?\", likeCount: 25},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileInfoType | null,\r\n    status: \"123\"\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionType): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST': {\r\n            const newPost: PostType = {id: 5, message: action.newMyPost, likeCount: 0};\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case 'PROFILE/SET-USER-PROFILE': {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case 'PROFILE/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'PROFILE/DELETE-POST': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n        case 'PROFILE/SAVE-PHOTO': {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileInfoType\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type ProfileActionType = InferActionsType<typeof actions>\r\nexport type ThunkType = BaseThunkType<ProfileActionType | FormAction>\r\nexport const actions = {\r\n    setUserProfile: (profile: ProfileInfoType) => ({type: 'PROFILE/SET-USER-PROFILE', profile: profile} as const),\r\n    addPostAC: (newMyPost: string) => ({type: 'PROFILE/ADD-POST', newMyPost} as const),\r\n    deletePostAC: (postId: number) => ({type: 'PROFILE/DELETE-POST', postId} as const),\r\n    setStatus: (status: string) => ({type: 'PROFILE/SET-STATUS', status: status} as const),\r\n    setPhotoSuccess: (photos: PhotosType) => ({type: 'PROFILE/SAVE-PHOTO', photos} as const)\r\n}\r\n\r\nexport const getUserProfileTC = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatusTC = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatusTC = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setPhotoSuccess(data.data))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileInfoType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id\r\n    let data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfileTC(userId))\r\n        } else {\r\n            throw  new Error(\"userId can't be null\")\r\n        }\r\n\r\n    } else {\r\n        // let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\n\r\nexport  type DialogsInitialStateType = typeof initialState;\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Victor\"},\r\n        {id: 2, name: \"Valera\"},\r\n        {id: 3, name: \"Veronika\"},\r\n        {id: 4, name: \"Alex\"},\r\n        {id: 5, name: \"Dima\"},\r\n        {id: 6, name: \"Toxa\"}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"kikii\"},\r\n        {id: 4, message: \"Alex\"},\r\n        {id: 5, message: \"Dima\"},\r\n        {id: 6, message: \"Toxa\"}\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionTypes):DialogsInitialStateType => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/SEND-MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type DialogsActionTypes = InferActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    sendMessageAC : (newMessageBody: string) => ({\r\n        type: 'DIALOGS/SEND-MESSAGE', newMessageBody\r\n    } as const)\r\n}\r\n\r\nexport default dialogsReducer;","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'api-key': '8eaba7cd-8849-4eb5-b90f-f5fda0cd9786'\r\n    }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}","export default __webpack_public_path__ + \"static/media/user.c74b2776.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__CIWxI\",\"selectedPage\":\"users_selectedPage__2fG4e\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport classes from \"./News.module.css\"\r\n\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\"\r\n\r\n\r\nconst Music = (props: any) => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings = (props: any) => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import {instance, APIResponseType, ResultCodeEnum, ResultCodeForCaptcha} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType>(`auth/login`,)\r\n            .then(res => res.data)\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(res => res.data)\r\n    }\r\n}","import React from 'react';\r\nimport {ResultCodeEnum, ResultCodeForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    id: null as (number | null),\r\n    email: null as (string | null),\r\n    login: null as (string | null),\r\n    isFetching: false,\r\n    isAuth: false,\r\n    captchaUrl: null as (string | null),\r\n}\r\n\r\nexport type AuthInitialStateType = typeof initialState\r\nexport type AuthActonType = InferActionsType<typeof actions>\r\nexport type ThunkType = BaseThunkType<AuthActonType | FormAction>\r\n\r\nexport const authReducer = (state = initialState, action:AuthActonType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n        case 'SET_CAPTCHA_URL':\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    setAuthUserData : (id: number | null, email: string | null, login: string | null, isFetching: boolean, isAuth: boolean) => ({type: 'SET_USER_DATA',data: {id, email, login, isFetching, isAuth}} as const),\r\n\r\n    setAuthCaptchaUrl : (captchaUrl: string) => ({type: 'SET_CAPTCHA_URL', data: {captchaUrl}} as const),\r\n\r\n}\r\n\r\n// export const getAuthUserDataThunk = () => (dispatch: any) => {\r\n//     return authAPI.getAuth()\r\n//         .then(response => {\r\n//         if (response.data.resultCode === 0) {\r\n//             let {id, login, email, isFetching, isAuth} = response.data.data\r\n//             dispatch(setAuthUserData(id, login, email, isFetching, true))\r\n//         }\r\n//     });\r\n// }\r\nexport const getAuthUserDataThunk = ():ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.getAuth();\r\n\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email, isFetching, isAuth} = meData.data\r\n        dispatch(actions.setAuthUserData(id, login, email, isFetching, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string):ThunkType =>\r\n    async (dispatch) => {\r\n\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (loginData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserDataThunk())\r\n    } else {\r\n        if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error'\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n    let data = await authAPI.logout();\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false, false))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = ():ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url\r\n    dispatch(actions.setAuthCaptchaUrl(captchaUrl))\r\n}\r\n\r\nexport default authReducer;","import {getAuthUserDataThunk} from \"./auth-reducer\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\nexport type InitializedAuthType = typeof initialState\r\n\r\ntype AppActionType = InferActionsType<typeof actions>\r\n\r\nexport const appReducer = (state = initialState, action: AppActionType): InitializedAuthType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED-SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeAppThunk = () => (dispatch:any) => {\r\n    let promise = dispatch(getAuthUserDataThunk());\r\n    promise.then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        }\r\n    )\r\n    ;\r\n}\r\n\r\nexport default appReducer;","import React from 'react';\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState) => {\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {GetItemsType, APIResponseType, instance} from \"./api\";\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n}","import React from 'react';\r\nimport {updateObjectInArray} from '../utils/object-helpers';\r\nimport {UserType} from \"../types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {usersAPI} from \"../api/user-api\";\r\nimport {ResultCodeEnum} from \"../api/api\";\r\n\r\nexport type UserInitialStateType = typeof initialState;\r\nexport type FilterType = typeof  initialState.filter\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalItemsCount: 0,\r\n    currentPage: 1,\r\n    portionSize: 10,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>,//Array of user id\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersReducersTypes): UserInitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", {followed: true})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.id) {\r\n                //         return {...u, followed: true}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", {followed: false})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.id) {\r\n                //         return {...u, followed: false}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case 'SET_USERS':\r\n            return {...state, users: action.users}\r\n\r\n        case 'SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case \"SET_FILTER\":\r\n            return {...state, filter: action.payload}\r\n\r\n        case 'SET_TOTAL_COUNT':\r\n            return {...state, totalItemsCount: action.totalItemsCount}\r\n\r\n        case 'TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype UsersReducersTypes = InferActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'TOGGLE_IS_FETCHING',\r\n        isFetching: isFetching\r\n    } as const),\r\n\r\n    toggleIsFollowing: (isFetching: boolean, userId: number) => ({\r\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching: isFetching,\r\n        userId: userId\r\n    } as const),\r\n\r\n    setTotalUsersCount: (totalItemsCount: number) => ({\r\n        type: 'SET_TOTAL_COUNT',\r\n        totalItemsCount: totalItemsCount\r\n    } as const),\r\n\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SET_CURRENT_PAGE',\r\n        currentPage: currentPage\r\n    } as const),\r\n\r\n    setFilter: (filter:FilterType) => ({\r\n        type: 'SET_FILTER',\r\n        payload: filter\r\n    } as const),\r\n\r\n    followSuccess: (userId: number) => ({\r\n        type: 'FOLLOW',\r\n        id: userId\r\n    } as const),\r\n\r\n    unfollowSuccess: (userId: number) => ({\r\n        type: 'UNFOLLOW',\r\n        id: userId\r\n    } as const),\r\n\r\n    setUsers: (users: Array<UserType>) => ({\r\n        type: 'SET_USERS',\r\n        users: users\r\n    } as const)\r\n\r\n}\r\n\r\ntype ThunkType = BaseThunkType<UsersReducersTypes>\r\n\r\nexport const getUsersTC = (page: number, pageSize: number, filter:FilterType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    dispatch(actions.setCurrentPage(page))\r\n    dispatch(actions.setFilter(filter))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize,filter.term,filter.friend);\r\n\r\n    dispatch(actions.toggleIsFetching(false))\r\n    dispatch(actions.setUsers(data.items))\r\n    dispatch(actions.setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n// const _followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n//     dispatch(toggleIsFollowing(true, userId));\r\n//     let response = await apiMethod(userId);\r\n//\r\n//     if (response.data.resultCode === 0) {\r\n//         dispatch(actionCreator(userId))\r\n//     }\r\n//     dispatch(toggleIsFollowing(false, userId))\r\n// }\r\n\r\n\r\nexport const followTC = (userId: number): ThunkType => async (dispatch) => {\r\n    // let apiMethod = usersAPI.follow.bind(usersAPI);\r\n    // let actionCreator = followSuccess;\r\n    // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n    dispatch(actions.toggleIsFollowing(true, userId))\r\n\r\n    let data = await usersAPI.follow(userId);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.followSuccess(userId))\r\n    }\r\n    dispatch(actions.toggleIsFollowing(false, userId))\r\n}\r\n\r\n\r\nexport const unfollowTC = (userId: number): ThunkType => async (dispatch: any) => {\r\n    // let apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n    // let actionCreator = unfollowSuccess;\r\n    // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n    dispatch(actions.toggleIsFollowing(true, userId))\r\n\r\n    let data = await usersAPI.unfollow(userId);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.unfollowSuccess(userId))\r\n    }\r\n    dispatch(actions.toggleIsFollowing(false, userId))\r\n\r\n}\r\n\r\nexport default usersReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore, Store} from \"redux\";\r\nimport reducer, {reducer as formReducer} from 'redux-form'\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\nexport let store: Store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// type PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n// export type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type InferActionsType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nexport default store;\r\n","import React, {ComponentType, Suspense} from \"react\";\r\n\r\nexport function withSuspense<WCP>(Component: ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <Suspense fallback={<div>Загрузка...</div>}>\r\n            <Component {...props}/>\r\n        </Suspense>\r\n    }\r\n\r\n};","import React, {useState} from 'react';\r\nimport styles from \"./Paginator.module.css\"\r\nimport cn from \"classnames\"\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number,\r\n    totalItemsCount: number,\r\n    currentPage: number,\r\n    portionSize: number,\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nlet Paginator: React.FC<PaginatorPropsType> = ({\r\n                                                   pageSize, totalItemsCount,\r\n                                                   portionSize,\r\n                                                   currentPage,\r\n                                                   onPageChanged\r\n                                               }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={cn(styles.paginator)}>\r\n        {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n                return <span className={cn(styles.pageNumber, {[styles.selectedPage]: currentPage === p})}\r\n                             key={p}\r\n                             onClick={(event) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber && <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n}\r\nexport default Paginator;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsUserType = {\r\n    followingInProgress: Array<number>\r\n    user: UserType,\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User:React.FC<PropsUserType> = ({user, followingInProgress, unfollow, follow}) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                    <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n\r\n                            unfollow(user.id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n\r\n                            follow(user.id)\r\n\r\n                        }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                 <span>\r\n                     <div>{\"u.location.country\"}</div>\r\n                     <div>{\"u.location.city\"}</div>\r\n                 </span>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nexport type USFPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\nconst userSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\nconst UserSearchForm: React.FC<USFPropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector((state: AppStateType) => state.usersPage.filter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={{term: filter.term, friend:String(filter.friend) as FriendFormType}}\r\n            validate={userSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})\r\n\r\nexport default UserSearchForm;","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state:AppStateType)=>{\r\n    return  state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state:AppStateType)=>{\r\n    return    state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalItemsCount = (state:AppStateType)=>{\r\n    return    state.usersPage.totalItemsCount\r\n}\r\n\r\nexport const getCurrentPage = (state:AppStateType)=>{\r\n    return    state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state:AppStateType)=>{\r\n    return    state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state:AppStateType)=>{\r\n    return    state.usersPage.followingInProgress\r\n}","import React, {useEffect} from 'react';\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport UserSearchForm from \"./UsersSearchForm\";\r\nimport {FilterType, followTC, getUsersTC, unfollowTC} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalItemsCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\ntype PropsUsType = {}\r\n\r\ntype QueryParamsType = { term?: string, page?: string, friend?: string };\r\nlet Users: React.FC<PropsUsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const totalItemsCount = useSelector(getTotalItemsCount)\r\n    const pageSize = useSelector(getPageSize)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const portionSize = useSelector((state: AppStateType) => state.usersPage.portionSize)\r\n    const filter = useSelector((state: AppStateType) => state.usersPage.filter)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(getUsersTC(actualPage, pageSize, actualFilter))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n            //`?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n        })\r\n    },[currentPage, filter])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsersTC(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsersTC(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(followTC(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollowTC(userId))\r\n    }\r\n\r\n    return <div>\r\n        <UserSearchForm onFilterChanged={onFilterChanged}/>\r\n        <Paginator pageSize={pageSize} totalItemsCount={totalItemsCount} portionSize={portionSize}\r\n                   currentPage={currentPage} onPageChanged={onPageChanged}/>\r\n        <div>\r\n            {users.map(u => <User user={u}\r\n                                  key={u.id}\r\n                                  followingInProgress={followingInProgress}\r\n                                  follow={follow}\r\n                                  unfollow={unfollow}/>\r\n            )}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\n\r\nexport type UserPagePropsType = {\r\n    pageTitle: string\r\n}\r\nexport const UserPage: React.FC<UserPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users/>\r\n    </>\r\n}\r\n\r\n","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport styles from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype CaptchaUrlType = {\r\n    captchaUrl: string | null\r\n}\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype FormDataValuesTypeKeys = Extract<keyof FormDataType, string>\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, CaptchaUrlType> & CaptchaUrlType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<FormDataValuesTypeKeys>(\"Email\", 'email', Input, [required])}\r\n            {createField<FormDataValuesTypeKeys>(\"Password\", 'password', Input, [required], {type: \"password\"})}\r\n            {createField<FormDataValuesTypeKeys>(undefined, 'rememberMe', Input, [], {type: \"checkbox\"}, \"remember me\")}\r\n            {/*<Field placeholder={'Email'} name={'email'} component={Input} validate={[required]}/>*/}\r\n            {/*<div>*/}\r\n            {/*    <Field placeholder={'Password'} name={'password'} component={Input} validate={[required]}*/}\r\n            {/*           type={\"password\"}/>*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me*/}\r\n            {/*</div>*/}\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<FormDataValuesTypeKeys>(\"Symbols from image\", 'captcha', Input, [])}\r\n\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, CaptchaUrlType>({form: 'login'})(LoginForm)\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onsubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onsubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Avatar, Col, Layout, Menu, Row, Button} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\n\r\nconst {Header} = Layout;\r\n\r\nexport const AppHeader: React.FC = (props) => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const login = useSelector((state: AppStateType) => state.auth.login)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n            <div className=\"logo\"/>\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\"> <NavLink to=\"/developers\">Developers</NavLink></Menu.Item>\r\n                        {/*<Menu.Item key=\"2\">nav 2</Menu.Item>*/}\r\n                        {/*<Menu.Item key=\"3\">nav 3</Menu.Item>*/}\r\n                    </Menu>\r\n                </Col>\r\n\r\n                {isAuth ?\r\n                    <>\r\n                        <Col span={4}>\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                        </Col>\r\n                        <Col span={2}>\r\n                            <Button onClick={logoutCallback}>Log out</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={6}>\r\n                        <Button>\r\n                            <NavLink to={'/login'}>Login</NavLink>\r\n                        </Button>\r\n                    </Col>}\r\n            </Row>\r\n        </Header>\r\n        // <header className={classes.header}>\r\n        //     <img src=\"https://miro.medium.com/max/1200/1*OQOVtYZWdAqGkWmZT4_BFw.jpeg\" alt=\"\"/>\r\n        //     <div className={classes.loginBlock}>\r\n        //         {props.isAuth\r\n        //             ? <div>{props.login} - <button onClick={props.logout}></button></div>\r\n        //             : <NavLink to={'/login'}>Login</NavLink>}\r\n        //     </div>\r\n        // </header>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport {HashRouter, NavLink, Redirect, Route, Switch, withRouter} from 'react-router-dom';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport {compose} from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeAppThunk, InitializedAuthType} from \"./redux/app-reducer\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport {UserPage} from \"./components/Users/UsersContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport \"antd/dist/antd.css\";\nimport './App.css';\nimport {Button, Avatar, Row, Col} from \"antd\";\nimport {Layout, Menu, Breadcrumb} from 'antd';\nimport {UserOutlined, LaptopOutlined, NotificationOutlined} from '@ant-design/icons';\nimport classes from \"./components/Navbar/Navbar.module.css\";\nimport {AppHeader} from \"./components/Header/Header\";\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\n\ntype MapStatePropsType = {\n    initialized: boolean\n}\n\ntype MapDispatchPropsType = {\n    initializeAppThunk: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\nconst {SubMenu} = Menu;\nconst {Content, Footer, Sider} = Layout;\n\nclass App extends React.Component<MapStatePropsType & MapDispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(\"Some error occured\")\n    }\n\n    componentDidMount() {\n        this.props.initializeAppThunk()\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <Layout>\n                <AppHeader/>\n                <Content style={{padding: '0 50px'}}>\n                    <Breadcrumb style={{margin: '16px 0'}}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                // defaultSelectedKeys={['1']}\n                                // defaultOpenKeys={['sub1']}\n                                style={{height: '100%'}}\n                            >\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\n                                    <Menu.Item key=\"1\">\n                                        <NavLink to=\"/profile\">Profile</NavLink>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"2\">\n                                        <NavLink to=\"/dialogs\">Message</NavLink>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"3\">option3</Menu.Item>\n                                    <Menu.Item key=\"4\">option4</Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\n                                    <Menu.Item key=\"5\">\n                                        <NavLink to=\"/developers\">Users</NavLink>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"6\">option6</Menu.Item>\n                                    <Menu.Item key=\"7\">option7</Menu.Item>\n                                    <Menu.Item key=\"8\">option8</Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\n                                    <Menu.Item key=\"9\">option9</Menu.Item>\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\n                                </SubMenu>\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n                            <Switch>\n                                <Redirect exact from=\"/\" to=\"/profile\"/>\n                                <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\n                                <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\n                                <Route path='/developers' render={() => <UserPage pageTitle=\"SAMURAI\"/>}/>\n                                <Route path='/news' component={News}/>\n                                <Route path='/music' component={Music}/>\n                                <Route path='/settings' component={Settings}/>\n                                <Route path='/login' render={() => <Login/>}/>\n                                <Route path='*' render={() => <div>404 NOT FOUND</div>}/>\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Ant Design ©2018 Created by Ant UED</Footer>\n            </Layout>\n            //\n            // <div className='app-wrapper'>\n            //     // <HeaderContainer/>\n            //     // <Navbar/>\n            //     // <div className='app-wrapper-content'>\n            //     // <Switch>\n            //     // <Redirect exact from=\"/\" to=\"/profile\"/>\n            //     // <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\n            //     // <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\n            //     // <Route path='/users' render={() => <UserPage pageTitle=\"SAMURAI\"/>}/>\n            //     // <Route path='/news' component={News}/>\n            //     // <Route path='/music' component={Music}/>\n            //     // <Route path='/settings' component={Settings}/>\n            //     // <Route path='/login' render={() => <Login/>}/>\n            //     // <Route path='*' render={() => <div>404 NOT FOUND</div>}/>\n            //     // </Switch>\n            //     // </div>\n            //     //\n            //     // </div>\n        )\n    }\n}\n\n\nlet mapStateToProps = (state: AppStateType): InitializedAuthType => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose\n    < React.ComponentType > (\n        connect(mapStateToProps, {initializeAppThunk}),\n            withRouter)(App);\n\nconst SamuraiJSApp: React.FC = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default SamuraiJSApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SamuraiJSApp from \"./App\";\n\nReactDOM.render(\n    <SamuraiJSApp/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType, required} from \"../../../utils/validators/validators\";\r\nimport {FormDataType} from \"../../Login/Login\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                          name: FormKeysType,\r\n                                          component: React.FC<WrappedFieldProps>,\r\n                                          validators: Array<FieldValidatorType>\r\n    , props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validators}\r\n               {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> =  Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl___qzNh\",\"error\":\"FormsControls_error__31HZd\",\"formSummaryError\":\"FormsControls_formSummaryError__1zDUG\"};"],"sourceRoot":""}