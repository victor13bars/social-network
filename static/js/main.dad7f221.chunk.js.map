{"version":3,"sources":["assets/images/user.png","assets/images/preloader.svg","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Navbar/Navbar.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Dialogs.module.css","serviceWorker.ts","redux/action.ts","api/api.js","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/sidebar-reducer.tsx","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/FormsControls/FormsControls.js","utils/validators/validators.js","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.js","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.module.css","components/Users/users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","ACTIONS_TYPE","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","ADD_POST","initialState","posts","id","message","likeCount","profile","setStatus","type","profileReducer","state","action","newPost","newMyPost","filter","p","postId","toggleIsFetching","isFetching","TOGGLE_IS_FETCHING","toggleIsFollowing","TOGGLE_IS_FOLLOWING_PROGRESS","setCurrentPage","SET_CURRENT_PAGE","followSuccess","FOLLOW","unfollowSuccess","UNFOLLOW","dialogs","name","messages","dialogsReducer","SEND_MESSAGE","body","newMessageBody","sidebarReducer","users","totalUsersCount","followingInProgress","usersReducer","map","u","followed","SET_USERS","SET_TOTAL_COUNT","login","isAuth","setAuthUserData","getAuthUserDataThunk","dispatch","resultCode","authReducer","initialized","appReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","log","classes","Navbar","className","nav","item","active","to","activeClassName","activeLink","News","props","Music","Settings","DialogItem","path","dialog","Message","FormControl","input","meta","child","hasError","touched","error","styles","formControl","children","Textarea","restProps","Input","required","value","maxLengthCreator","maxLength","length","maxLength10","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogsItems","key","messagesItems","ms","values","sendMessage","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","compose","sendMessageAC","Users","pagesCount","Math","ceil","pages","i","push","selectedPage","onClick","event","onPageChanged","src","photos","small","userPhoto","disabled","some","unfollowThunkCreator","followThunkCreator","Preloader","preloader","getUsers","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","getUsersThunkCreator","this","React","page","items","totalCount","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatusThunkCreator","ProfileInfo","descriptionBlock","large","alt","aboutMe","lookingForAJobDescription","Post","MyPosts","memo","postsElements","postsBlock","AddMyPostsFormRedux","addPost","MyPostsContainer","addPostAC","Profile","ProfileContainer","params","authorizedUserId","getUserProfileThunkCreator","getStatusThunkCreator","withRouter","Header","header","loginBlock","logout","HeaderContainer","LoginReduxForm","formSummaryError","stopSubmit","_error","formData","App","initializeAppThunk","render","DialogsContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dad7f221.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.98fd41aa.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.088f5f2e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1yGOj\",\"img\":\"ProfileInfo_img__3iXWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1KpQm\",\"item\":\"Navbar_item__1T86p\",\"activeLink\":\"Navbar_activeLink__1Dlvh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__CkvLJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__M95VY\",\"dialogsItems\":\"Dialogs_dialogsItems__2nFq3\",\"dialog\":\"Dialogs_dialog__1OLky\",\"active\":\"Dialogs_active__3UHKX\",\"messages\":\"Dialogs_messages__1VmHk\",\"message\":\"Dialogs_message__1a9NF\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {UserType} from \"./users-reducer\";\r\nimport {ProfileInfoType, setStatus} from \"./profile-reducer\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nexport enum ACTIONS_TYPE {\r\n    TOGGLE_IS_FETCHING = 'TOGGLE/IS_FETCHING',\r\n    TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE/IS_FOLLOWING_PROGRESS',\r\n    SET_TOTAL_COUNT = 'USERS/SET_TOTAL_COUNT',\r\n    SET_CURRENT_PAGE = 'USERS/SET_CURRENT_PAGE',\r\n    SET_USERS = 'USERS/SET_USERS',\r\n    FOLLOW = 'USERS/FOLLOW',\r\n    UNFOLLOW = 'USERS/UNFOLLOW',\r\n    // ADD_POST = \"PROFILE/ADD-POST\",\r\n    // SET_USER_PROFILE = \"PROFILE/SET-USER-PROFILE\",\r\n    // SET_STATUS = \"PROFILE/SET-STATUS\",\r\n    SEND_MESSAGE = \"DIALOGS/SEND-MESSAGE\"\r\n}\r\n\r\n\r\nexport type ToggleIsFetchingACType = {\r\n    type: ACTIONS_TYPE.TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.TOGGLE_IS_FETCHING,\r\n        isFetching: isFetching\r\n    }\r\n}\r\n\r\nexport type ToggleIsFollowingACType = {\r\n    type: ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: boolean,\r\n    userId: number\r\n}\r\n\r\nexport const toggleIsFollowing = (isFetching: boolean, userId: number): ToggleIsFollowingACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching: isFetching,\r\n        userId: userId\r\n    }\r\n}\r\n\r\nexport type SetTotalUsersCountACType = {\r\n    type: ACTIONS_TYPE.SET_TOTAL_COUNT,\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_TOTAL_COUNT,\r\n        totalUsersCount: totalUsersCount\r\n\r\n    }\r\n}\r\n\r\nexport type SetCurrentPageACType = {\r\n    type: ACTIONS_TYPE.SET_CURRENT_PAGE,\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_CURRENT_PAGE,\r\n        currentPage: currentPage\r\n\r\n    }\r\n}\r\n\r\nexport type FollowACType = {\r\n    type: ACTIONS_TYPE.FOLLOW,\r\n    id: number\r\n}\r\nexport const followSuccess = (userId: number): FollowACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.FOLLOW,\r\n        id: userId\r\n    }\r\n}\r\n\r\nexport type UnFollowACType = {\r\n    type: ACTIONS_TYPE.UNFOLLOW,\r\n    id: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnFollowACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.UNFOLLOW,\r\n        id: userId\r\n    }\r\n}\r\n\r\nexport type SetUsersACType = {\r\n    type: ACTIONS_TYPE.SET_USERS,\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): SetUsersACType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_USERS,\r\n        users: users\r\n    }\r\n}\r\n\r\nexport type UsersReducersTypes =\r\n    FollowACType\r\n    | UnFollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingACType;\r\n\r\n\r\nexport type SendMessageActionType = {\r\n    type: ACTIONS_TYPE.SEND_MESSAGE,\r\n    newMessageBody: string\r\n}\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SEND_MESSAGE, newMessageBody\r\n    }\r\n}\r\n\r\nexport type DialogsReducersTypes = SendMessageActionType;\r\n\r\nexport const getStatusThunkCreator = (userId: number) => {\r\n    return (dispatch: any) => {\r\n\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                debugger\r\n                dispatch(setStatus(response.data))\r\n\r\n            });\r\n    }\r\n}\r\n\r\nexport const updateStatusThunkCreator = (status: string) => {\r\n    return (dispatch: any) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setStatus(status))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        usersAPI.getUsers(page, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        });\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFollowing(true, userId))\r\n        usersAPI.follow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleIsFollowing(false, userId))\r\n        });\r\n    }\r\n}\r\n\r\nexport const unfollowThunkCreator = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFollowing(true, userId))\r\n        usersAPI.unfollow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n            }\r\n            dispatch(toggleIsFollowing(false, userId))\r\n        });\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'api-key': '8eaba7cd-8849-4eb5-b90f-f5fda0cd9786'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n\r\n    getProfile(userId) {\r\n        console.warn('Obsolute method. Please profileAPI object')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`, )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {PostType} from \"../components/Profile/MyPosts/MyPosts\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = \"PROFILE/ADD-POST\";\r\nconst DELETE_POST = \"PROFILE/DELETE-POST\";\r\nconst SET_USER_PROFILE = \"PROFILE/SET-USER-PROFILE\";\r\nconst SET_STATUS = \"PROFILE/SET-STATUS\";\r\n\r\nexport type ContactsType = {\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string,\r\n    large: string\r\n}\r\nexport type ProfileInfoType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: null | ProfileInfoType\r\n    status: string\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likeCount: 12},\r\n        {id: 2, message: \"How are you?\", likeCount: 25},\r\n    ],\r\n    profile: null,\r\n    status: \"123\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducersTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostType = {id: 5, message: action.newMyPost, likeCount: 0};\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type SetUserProfileACType = {\r\n    type: \"PROFILE/SET-USER-PROFILE\",\r\n    profile: ProfileInfoType\r\n}\r\nexport const setUserProfile = (profile: ProfileInfoType): SetUserProfileACType => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile: profile\r\n    }\r\n}\r\n\r\nexport const getUserProfileThunkCreator = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        usersAPI.getProfile(userId).then(response => {\r\n            dispatch(setUserProfile(response.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport type AddPostActionType = {\r\n    type: \"PROFILE/ADD-POST\",\r\n    newMyPost: string\r\n}\r\nexport const addPostAC = (newMyPost: string): AddPostActionType => {\r\n    return {\r\n        type: ADD_POST,\r\n        newMyPost\r\n    }\r\n}\r\n\r\nexport type DeletePostActionType = {\r\n    type: \"PROFILE/DELETE-POST\",\r\n    postId: number\r\n}\r\nexport const deletePostAC = (postId: number): DeletePostActionType => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId\r\n    }\r\n}\r\n\r\n\r\nexport type SetStatusACType = {\r\n    type: \"PROFILE/SET-STATUS\",\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): SetStatusACType => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status: status\r\n    }\r\n}\r\n\r\nexport type ProfileReducersTypes =\r\n    AddPostActionType\r\n    | SetUserProfileACType\r\n    | SetStatusACType\r\n    | DeletePostActionType;\r\n\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport {ACTIONS_TYPE, DialogsReducersTypes} from \"./action\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type MessagesPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type DialogsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: () => void\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Victor\"},\r\n        {id: 2, name: \"Valera\"},\r\n        {id: 3, name: \"Veronika\"},\r\n        {id: 4, name: \"Alex\"},\r\n        {id: 5, name: \"Dima\"},\r\n        {id: 6, name: \"Toxa\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"kikii\"},\r\n        {id: 4, message: \"Alex\"},\r\n        {id: 5, message: \"Dima\"},\r\n        {id: 6, message: \"Toxa\"}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: MessagesPagesType = initialState, action: DialogsReducersTypes) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;","import React from 'react';\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState) => {\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","import React from 'react';\r\nimport {ACTIONS_TYPE, UsersReducersTypes} from \"./action\";\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    },\r\n    followed: boolean,\r\n    name: string,\r\n    location: {\r\n        city: string,\r\n        country: string\r\n    },\r\n    status: string\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress:Array<number>\r\n}\r\nlet initialState = {\r\n    users: [\r\n        // {id: 1,photoUrl:\"https://www.nastol.com.ua/download.php?img=201212/1440x900/nastol.com.ua-37486.jpg\",followed: false, fullname: \"I'am a boss\", location: {city: \"Zhodino\", country: \"Belarus\"}},\r\n        // {id: 2,photoUrl:\"https://f3.upet.com/P_LOy49X6Hub_u.jpg\", followed: true, fullname: \"Viktor.S\", location: {city: \"Los Angeles\", country: \"USA\"}},\r\n        // {id: 3,photoUrl:\"https://wallbox.ru/resize/1024x768/wallpapers/main/201522/d05a059101136c6.jpg\", followed: false, fullname: \"Mihel.K\", location: {city: \"Barsuki\", country: \"Russia\"}},\r\n    ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress:[]\r\n}\r\n\r\nexport const usersReducer = (state: UsersType = initialState, action: UsersReducersTypes) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case ACTIONS_TYPE.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case ACTIONS_TYPE.SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case ACTIONS_TYPE.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case ACTIONS_TYPE.SET_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case ACTIONS_TYPE.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS:{\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress,action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n    }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React from 'react';\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"AUTH-SET-USER-DATA\"\r\n\r\nexport type AuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: boolean,\r\n    isAuth: boolean\r\n}\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false\r\n}\r\n\r\nexport type SetUserDataACType = {\r\n    type: \"AUTH-SET-USER-DATA\",\r\n    data: AuthType\r\n}\r\n\r\nexport const setAuthUserData = (id: null, email: null, login: null, isFetching: boolean, isAuth: boolean): SetUserDataACType => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {id, email, login, isFetching, isAuth}\r\n    }\r\n}\r\n\r\nexport const getAuthUserDataThunk = () => (dispatch: any) => {\r\n    return authAPI.getAuth().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            let {id, login, email, isFetching, isAuth} = response.data.data\r\n            dispatch(setAuthUserData(id, login, email, isFetching, true))\r\n        }\r\n    });\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => (dispatch: any) => {\r\n\r\n    authAPI.login(email, password, rememberMe).then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserDataThunk())\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n            console.log(response.data)\r\n            dispatch(stopSubmit(\"login\", {_error: message}))\r\n        }\r\n    });\r\n}\r\n\r\nexport const logout = () => (dispatch: any) => {\r\n    authAPI.logout().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false, false))\r\n        }\r\n    });\r\n}\r\n\r\nexport type OwnUserDataReducersTypes = SetUserDataACType\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: OwnUserDataReducersTypes) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserDataThunk} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED-SUCCESS\";\r\n\r\nexport type InitializedAuthType = {\r\n    initialized: boolean\r\n}\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitializedSuccesACType = {\r\n    type: \"INITIALIZED-SUCCESS\"\r\n\r\n}\r\n\r\nexport const initializedSucces = (): InitializedSuccesACType => {\r\n    return {\r\n        type: \"INITIALIZED-SUCCESS\"\r\n    }\r\n}\r\n\r\nexport const initializeAppThunk = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserDataThunk());\r\n    promise.then(() => {\r\n        dispatch(initializedSucces());\r\n    });\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitializedAuthType = initialState, action: InitializedSuccesACType) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth:authReducer,\r\n    form:formReducer,\r\n    app:appReducer\r\n});\r\n// export type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport let store: Store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n// @ts-ignore\r\nconsole.log(window.store)\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconsole.log(classes);\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to =\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={classes.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to =\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport  default Navbar;","import React from \"react\";\r\nimport classes from \"./News.module.css\"\r\n\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\"\r\n\r\n\r\nconst Music = (props: any) => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings = (props: any) => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path =\"/dialog/\" + props.id;\r\n    return (\r\n\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype MessageType = {\r\n    id:number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({input, meta,child, ...props}) =>{\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props) => {\r\n    const {input, meta,child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta,child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","export const required = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport type DialogsPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: (newMessageBody: string) => void,\r\n    isAuth: boolean\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsItems = props.dialogs.map(dialog => (<DialogItem id={dialog.id} key={dialog.id} name={dialog.name}/>));\r\n    let messagesItems = props.messages.map(ms => <Message id={ms.id} message={ms.message} key={ms.id}/>);\r\n\r\n    let addNewMessage = (values:FormDataType) => {\r\n        console.log(values)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsItems}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    {messagesItems}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message \"\r\n                validate={[required,maxLength10]}/>\r\n                {/*<textarea value={newMessageBody}*/}\r\n                {/*          onChange={onNewMessageChange}*/}\r\n                {/*          placeholder=\"Enter your message \"></textarea>*/}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType):MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component:ComponentType<T>) {\r\n    const RedirectComponent = (props:MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {DialogsReducersTypes, sendMessageAC} from \"../../redux/action\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<DialogsReducersTypes>) => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsUsType = {\r\n    followingInProgress: Array<number>\r\n    users: Array<UserType>,\r\n    followSuccess: (id: number) => void,\r\n    unfollowSuccess: (id: number) => void,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void\r\n    unfollowThunkCreator: (userId: number) => void\r\n    followThunkCreator: (userId: number) => void\r\n}\r\n\r\nlet Users = (props: PropsUsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? styles.selectedPage : \"\"}\r\n                             onClick={(event) => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n\r\n        </div>\r\n        {props.users.map(u => <div key={u.id}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + u.id}>\r\n                    <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n\r\n                            props.unfollowThunkCreator(u.id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n\r\n                            props.followThunkCreator(u.id)\r\n\r\n                        }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </span>\r\n                 <span>\r\n                     <div>{\"u.location.country\"}</div>\r\n                     <div>{\"u.location.city\"}</div>\r\n                 </span>\r\n            </span>\r\n        </div>)}\r\n    </div>\r\n}\r\nexport default Users;","import preloader from \"../../../assets/images/preloader.svg\";\nimport React from \"react\";\n\nlet Preloader = () => {\n    return <div>\n        <img src={preloader}/>\n    </div>\n}\n\nexport default Preloader;\n","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state:AppStateType)=>{\r\n    return  state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state:AppStateType)=>{\r\n    return    state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state:AppStateType)=>{\r\n    return    state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state:AppStateType)=>{\r\n    return    state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state:AppStateType)=>{\r\n    return    state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state:AppStateType)=>{\r\n    return    state.usersPage.followingInProgress\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    followSuccess,\r\n    followThunkCreator,\r\n    getUsersThunkCreator,\r\n    setCurrentPage,\r\n    unfollowSuccess,\r\n    unfollowThunkCreator\r\n} from \"../../redux/action\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n}\r\ntype mapDispatchToPropsType = {\r\n    followSuccess: (id: number) => void,\r\n    unfollowSuccess: (id: number) => void,\r\n    setCurrentPage: (currentPage: number) => void,\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void,\r\n    unfollowThunkCreator: (userId: number) => void,\r\n    followThunkCreator: (userId: number) => void\r\n}\r\ntype PropsUserType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component<any, PropsUserType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        //     this.props.setTotalUsersCount(data.totalCount)\r\n        // });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsersThunkCreator(pageNumber, this.props.pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // this.props.setCurrentPage(pageNumber)\r\n        // usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   followSuccess={this.props.followSuccess}\r\n                   unfollowSuccess={this.props.unfollowSuccess}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   unfollowThunkCreator={this.props.unfollowThunkCreator}\r\n                   followThunkCreator={this.props.followThunkCreator}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n// let mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch: Dispatch<UsersReducersTypes>) => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (currentPage: number) => {\r\n//             dispatch(setCurrentPageAC(currentPage))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//\r\n//         }\r\n//     }\r\n// }\r\n\r\n// let AuthRedirect = withAuthRedirect(UsersContainer)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        followSuccess,\r\n        unfollowSuccess,\r\n        setCurrentPage,\r\n        getUsersThunkCreator,\r\n        followThunkCreator,\r\n        unfollowThunkCreator\r\n    }),\r\n    withAuthRedirect)(UsersContainer)\r\n\r\n// export default connect(mapStateToProps, {\r\n//     followSuccess,\r\n//     unfollowSuccess,\r\n//     setCurrentPage,\r\n//     getUsersThunkCreator,\r\n//     followThunkCreator,\r\n//     unfollowThunkCreator\r\n// })(AuthRedirect);","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\nexport type ProfileStatusWithHooksType = {\r\n    status: string,\r\n    updateStatusThunkCreator: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatusThunkCreator(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"----------------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo = (props:ProfilePropsType) => {\r\n    if(!props.profile){\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img className={classes.img}*/}\r\n            {/*         src=\"https://avatars.mds.yandex.net/get-pdb/2797954/0e70c09d-6fa7-40ac-ba85-c36b467e8de5/s1200?webp=false\"*/}\r\n            {/*         alt=\"\"/>*/}\r\n            {/*</div>*/}\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.profile.photos.large} alt=\"\"/>\r\n                <div>{props.profile.aboutMe}</div>\r\n                <div>{props.profile.lookingForAJobDescription}</div>\r\n                <ProfileStatusWithHooks status={props.status} updateStatusThunkCreator={props.updateStatusThunkCreator}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType ={\r\n    id:number\r\n    message:string\r\n    likeCount:number\r\n}\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-pdb/750997/2f4a61ff-0c60-41d6-a2f1-049bc4ee8f21/s1200?webp=false\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newMyPost: string\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newMyPost: string) => void\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log(props.posts)\r\n    let postsElements = props.posts.map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    // let onAddPost = () => {\r\n    //     props.addPost();\r\n    //     //props.dispatch(addPostActionCreator());\r\n    // }\r\n    //\r\n    // let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.currentTarget.value;\r\n    //     props.updateNewPostText(text);\r\n    //     //props.dispatch(updateNewPostTextActionCreator(text))\r\n    // }\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newMyPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddMyPostsFormRedux onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nconst AddMyPostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMyPost\" placeholder=\"Enter your post\"\r\n                       validate={[required, maxLength10]}/>\r\n                {/*<textarea value={props.newPostText} onChange={onPostChange}/>*/}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostsFormRedux = reduxForm<FormDataType>({form: 'profileAddNewMyPost'})(AddMyPostsForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, ProfileReducersTypes} from \"../../../redux/profile-reducer\";\r\n\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState();\r\n//\r\n//                     let addPost = () => {\r\n//                         store.dispatch(addPostActionCreator());\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = updateNewPostTextActionCreator(text);\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts updateNewPostText={onPostChange} addPost={addPost}\r\n//                                     posts={state.profileReducer.posts}\r\n//                                     newPostText={state.profileReducer.messageForNewPost}/>\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducersTypes>) => {\r\n    return {\r\n        addPost: (newMyPost: string) => {\r\n            dispatch(addPostAC(newMyPost));\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport classes from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfoType} from \"../../redux/profile-reducer\";\r\nimport {updateStatusThunkCreator} from \"../../redux/action\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: null | ProfileInfoType,\r\n    status: string,\r\n    updateStatusThunkCreator: (status: string) => void\r\n\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusThunkCreator={props.updateStatusThunkCreator}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusThunkCreator,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/action\";\r\nimport {getUserProfileThunkCreator, ProfileInfoType} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter, Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: null | ProfileInfoType\r\n    status: string\r\n    authorizedUserId: null\r\n    isAuth:boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunkCreator: (userId: number) => void\r\n    getStatusThunkCreator: (userId: number) => void\r\n    updateStatusThunkCreator: (status: string) => void\r\n}\r\ntype PathParamsTYpe = {\r\n    userId: string\r\n}\r\ntype ProfilePropsType = MapDispatchPropsType & MapStatePropsType\r\ntype PropsType = RouteComponentProps<PathParamsTYpe> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<any, PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getStatusThunkCreator(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusThunkCreator={this.props.updateStatusThunkCreator}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        getStatusThunkCreator,\r\n        updateStatusThunkCreator\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfileThunkCreator})(WithUrlDataContainerComponent));","import React from \"react\";\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AuthType} from \"../../redux/auth-reducer\";\r\n\r\nexport type HeaderPropsType = {\r\n    auth: null | AuthType\r\n    logout: () => void\r\n}\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src=\"https://miro.medium.com/max/1200/1*OQOVtYZWdAqGkWmZT4_BFw.jpeg\" alt=\"\"/>\r\n            <div className={classes.loginBlock}>\r\n                {props.auth?.isAuth? <div>{props.auth.login} - <button onClick={props.logout}></button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthType, getAuthUserDataThunk, logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    auth: null | AuthType\r\n}\r\ntype MapDispatchPropsType = {\r\n    getAuthUserDataThunk: () => void\r\n    logout: () => void\r\n}\r\n\r\nexport type AuthPropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass HeaderContainer extends React.Component<any, AuthPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} auth={this.props.auth} logout={this.props.logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    auth: state.auth\r\n})\r\nexport default connect(mapStateToProps, {getAuthUserDataThunk,logout})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport styles from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} component={Input} validate={[required]} type={\"password\"}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me\r\n            </div>\r\n            {props.error && <div className={styles.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nexport const Login = (props:any) => {\r\n    const onsubmit = (formData: FormDataType) => {\r\n        props.login(formData.email,formData.password,formData.rememberMe)\r\n    }\r\n    if(props.isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onsubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps,{login})(Login);","import React from 'react';\nimport './App.css';\nimport {Route, withRouter} from 'react-router-dom';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {initializeAppThunk, InitializedAuthType} from \"./redux/app-reducer\";\nimport {AppStateType} from \"./redux/redux-store\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\n\nlet mapStateToProps = (state: AppStateType): InitializedAuthType => ({\n    initialized: state.app.initialized\n})\n\ntype MapDispatchPropsType = {\n    getAuthUserDataThunk: () => void\n\n}\n// type AppType = {\n//     store: Store\n//     dispatch: (action: AddPostActionType | UpdateNewPostTextActionType | UpdateNewMessageBodyActionType | SendMessageActionType) => void\n// }\n\nclass App extends React.Component<any, MapDispatchPropsType> {\n    componentDidMount() {\n        this.props.initializeAppThunk()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        initializeAppThunk\n    }),\n    withRouter\n)(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl___qzNh\",\"error\":\"FormsControls_error__31HZd\",\"formSummaryError\":\"FormsControls_formSummaryError__1zDUG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__CIWxI\",\"selectedPage\":\"users_selectedPage__2fG4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2PbKd\",\"posts\":\"MyPosts_posts__1RwQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vImZ\",\"loginBlock\":\"Header_loginBlock__EIyyf\"};"],"sourceRoot":""}